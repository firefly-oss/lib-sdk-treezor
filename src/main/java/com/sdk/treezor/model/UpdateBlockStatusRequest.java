/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateBlockStatusRequest
 */
@JsonPropertyOrder({
  UpdateBlockStatusRequest.JSON_PROPERTY_LOCK_STATUS,
  UpdateBlockStatusRequest.JSON_PROPERTY_ACCESS_TAG
})
@JsonTypeName("updateBlockStatus_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class UpdateBlockStatusRequest {
  /**
   * The Status of the card, indicating whether it is locked, lost, or destroyed.  While this field is an integer, it returns a plaintext value. See the full list of &#x60;lockStatus&#x60; in the [Block a Card](/guide/cards/modification.html#status) article. 
   */
  public enum LockStatusEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1)),
    
    NUMBER_2(Integer.valueOf(2)),
    
    NUMBER_3(Integer.valueOf(3)),
    
    NUMBER_4(Integer.valueOf(4)),
    
    NUMBER_5(Integer.valueOf(5));

    private Integer value;

    LockStatusEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LockStatusEnum fromValue(Integer value) {
      for (LockStatusEnum b : LockStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOCK_STATUS = "lockStatus";
  @javax.annotation.Nonnull
  private LockStatusEnum lockStatus;

  public static final String JSON_PROPERTY_ACCESS_TAG = "accessTag";
  @javax.annotation.Nullable
  private String accessTag;

  public UpdateBlockStatusRequest() {
  }

  public UpdateBlockStatusRequest lockStatus(@javax.annotation.Nonnull LockStatusEnum lockStatus) {
    
    this.lockStatus = lockStatus;
    return this;
  }

  /**
   * The Status of the card, indicating whether it is locked, lost, or destroyed.  While this field is an integer, it returns a plaintext value. See the full list of &#x60;lockStatus&#x60; in the [Block a Card](/guide/cards/modification.html#status) article. 
   * @return lockStatus
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCK_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LockStatusEnum getLockStatus() {
    return lockStatus;
  }


  @JsonProperty(JSON_PROPERTY_LOCK_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLockStatus(@javax.annotation.Nonnull LockStatusEnum lockStatus) {
    this.lockStatus = lockStatus;
  }

  public UpdateBlockStatusRequest accessTag(@javax.annotation.Nullable String accessTag) {
    
    this.accessTag = accessTag;
    return this;
  }

  /**
   * A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). 
   * @return accessTag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccessTag() {
    return accessTag;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBlockStatusRequest updateBlockStatusRequest = (UpdateBlockStatusRequest) o;
    return Objects.equals(this.lockStatus, updateBlockStatusRequest.lockStatus) &&
        Objects.equals(this.accessTag, updateBlockStatusRequest.accessTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lockStatus, accessTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBlockStatusRequest {\n");
    sb.append("    lockStatus: ").append(toIndentedString(lockStatus)).append("\n");
    sb.append("    accessTag: ").append(toIndentedString(accessTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

