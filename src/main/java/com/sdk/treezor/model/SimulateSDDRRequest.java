/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SimulateSDDRRequest
 */
@JsonPropertyOrder({
  SimulateSDDRRequest.JSON_PROPERTY_DEBITOR_IBAN,
  SimulateSDDRRequest.JSON_PROPERTY_AMOUNT,
  SimulateSDDRRequest.JSON_PROPERTY_TYPE_S_D_D,
  SimulateSDDRRequest.JSON_PROPERTY_TYPE_REJECT,
  SimulateSDDRRequest.JSON_PROPERTY_SCI,
  SimulateSDDRRequest.JSON_PROPERTY_NB_TXS,
  SimulateSDDRRequest.JSON_PROPERTY_MANDATE_ID,
  SimulateSDDRRequest.JSON_PROPERTY_EXECUTE_AFTER_PARSE
})
@JsonTypeName("SimulateSDDR_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class SimulateSDDRRequest {
  public static final String JSON_PROPERTY_DEBITOR_IBAN = "debitorIban";
  @javax.annotation.Nullable
  private String debitorIban;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nullable
  private String amount;

  /**
   * Gets or Sets typeSDD
   */
  public enum TypeSDDEnum {
    CORE(String.valueOf("CORE")),
    
    B2_B(String.valueOf("B2B"));

    private String value;

    TypeSDDEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeSDDEnum fromValue(String value) {
      for (TypeSDDEnum b : TypeSDDEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_S_D_D = "typeSDD";
  @javax.annotation.Nullable
  private TypeSDDEnum typeSDD;

  /**
   * The type of error returned if the SDDR fails. Defaults to &#x60;rejected&#x60;. 
   */
  public enum TypeRejectEnum {
    REJECTED(String.valueOf("rejected")),
    
    RETURNED(String.valueOf("returned")),
    
    REFUNDED(String.valueOf("refunded")),
    
    TODAY(String.valueOf("today"));

    private String value;

    TypeRejectEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeRejectEnum fromValue(String value) {
      for (TypeRejectEnum b : TypeRejectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_REJECT = "typeReject";
  @javax.annotation.Nullable
  private TypeRejectEnum typeReject = TypeRejectEnum.REJECTED;

  public static final String JSON_PROPERTY_SCI = "sci";
  @javax.annotation.Nullable
  private String sci;

  public static final String JSON_PROPERTY_NB_TXS = "nbTxs";
  @javax.annotation.Nullable
  private Integer nbTxs = 1;

  public static final String JSON_PROPERTY_MANDATE_ID = "mandateId";
  @javax.annotation.Nullable
  private String mandateId;

  /**
   * Gets or Sets executeAfterParse
   */
  public enum ExecuteAfterParseEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    ExecuteAfterParseEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExecuteAfterParseEnum fromValue(Integer value) {
      for (ExecuteAfterParseEnum b : ExecuteAfterParseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EXECUTE_AFTER_PARSE = "executeAfterParse";
  @javax.annotation.Nullable
  private ExecuteAfterParseEnum executeAfterParse;

  public SimulateSDDRRequest() {
  }

  public SimulateSDDRRequest debitorIban(@javax.annotation.Nullable String debitorIban) {
    
    this.debitorIban = debitorIban;
    return this;
  }

  /**
   * IBAN or Virtual IBAN of the debited Wallet.
   * @return debitorIban
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEBITOR_IBAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDebitorIban() {
    return debitorIban;
  }


  @JsonProperty(JSON_PROPERTY_DEBITOR_IBAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDebitorIban(@javax.annotation.Nullable String debitorIban) {
    this.debitorIban = debitorIban;
  }

  public SimulateSDDRRequest amount(@javax.annotation.Nullable String amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@javax.annotation.Nullable String amount) {
    this.amount = amount;
  }

  public SimulateSDDRRequest typeSDD(@javax.annotation.Nullable TypeSDDEnum typeSDD) {
    
    this.typeSDD = typeSDD;
    return this;
  }

  /**
   * Get typeSDD
   * @return typeSDD
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_S_D_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeSDDEnum getTypeSDD() {
    return typeSDD;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_S_D_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeSDD(@javax.annotation.Nullable TypeSDDEnum typeSDD) {
    this.typeSDD = typeSDD;
  }

  public SimulateSDDRRequest typeReject(@javax.annotation.Nullable TypeRejectEnum typeReject) {
    
    this.typeReject = typeReject;
    return this;
  }

  /**
   * The type of error returned if the SDDR fails. Defaults to &#x60;rejected&#x60;. 
   * @return typeReject
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_REJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeRejectEnum getTypeReject() {
    return typeReject;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_REJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeReject(@javax.annotation.Nullable TypeRejectEnum typeReject) {
    this.typeReject = typeReject;
  }

  public SimulateSDDRRequest sci(@javax.annotation.Nullable String sci) {
    
    this.sci = sci;
    return this;
  }

  /**
   * The SEPA Credit Identifier of the user. In the case of simulation, this defaults to a random string.
   * @return sci
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSci() {
    return sci;
  }


  @JsonProperty(JSON_PROPERTY_SCI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSci(@javax.annotation.Nullable String sci) {
    this.sci = sci;
  }

  public SimulateSDDRRequest nbTxs(@javax.annotation.Nullable Integer nbTxs) {
    
    this.nbTxs = nbTxs;
    return this;
  }

  /**
   * The number of transactions for the SDD. 
   * @return nbTxs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NB_TXS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNbTxs() {
    return nbTxs;
  }


  @JsonProperty(JSON_PROPERTY_NB_TXS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNbTxs(@javax.annotation.Nullable Integer nbTxs) {
    this.nbTxs = nbTxs;
  }

  public SimulateSDDRRequest mandateId(@javax.annotation.Nullable String mandateId) {
    
    this.mandateId = mandateId;
    return this;
  }

  /**
   * The unique identifier of the Mandate
   * @return mandateId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANDATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMandateId() {
    return mandateId;
  }


  @JsonProperty(JSON_PROPERTY_MANDATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMandateId(@javax.annotation.Nullable String mandateId) {
    this.mandateId = mandateId;
  }

  public SimulateSDDRRequest executeAfterParse(@javax.annotation.Nullable ExecuteAfterParseEnum executeAfterParse) {
    
    this.executeAfterParse = executeAfterParse;
    return this;
  }

  /**
   * Get executeAfterParse
   * @return executeAfterParse
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTE_AFTER_PARSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecuteAfterParseEnum getExecuteAfterParse() {
    return executeAfterParse;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTE_AFTER_PARSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecuteAfterParse(@javax.annotation.Nullable ExecuteAfterParseEnum executeAfterParse) {
    this.executeAfterParse = executeAfterParse;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateSDDRRequest simulateSDDRRequest = (SimulateSDDRRequest) o;
    return Objects.equals(this.debitorIban, simulateSDDRRequest.debitorIban) &&
        Objects.equals(this.amount, simulateSDDRRequest.amount) &&
        Objects.equals(this.typeSDD, simulateSDDRRequest.typeSDD) &&
        Objects.equals(this.typeReject, simulateSDDRRequest.typeReject) &&
        Objects.equals(this.sci, simulateSDDRRequest.sci) &&
        Objects.equals(this.nbTxs, simulateSDDRRequest.nbTxs) &&
        Objects.equals(this.mandateId, simulateSDDRRequest.mandateId) &&
        Objects.equals(this.executeAfterParse, simulateSDDRRequest.executeAfterParse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debitorIban, amount, typeSDD, typeReject, sci, nbTxs, mandateId, executeAfterParse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateSDDRRequest {\n");
    sb.append("    debitorIban: ").append(toIndentedString(debitorIban)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    typeSDD: ").append(toIndentedString(typeSDD)).append("\n");
    sb.append("    typeReject: ").append(toIndentedString(typeReject)).append("\n");
    sb.append("    sci: ").append(toIndentedString(sci)).append("\n");
    sb.append("    nbTxs: ").append(toIndentedString(nbTxs)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    executeAfterParse: ").append(toIndentedString(executeAfterParse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

