/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionObjectTransactionsInner
 */
@JsonPropertyOrder({
  TransactionObjectTransactionsInner.JSON_PROPERTY_TRANSACTION_ID,
  TransactionObjectTransactionsInner.JSON_PROPERTY_WALLET_DEBIT_ID,
  TransactionObjectTransactionsInner.JSON_PROPERTY_WALLET_CREDIT_ID,
  TransactionObjectTransactionsInner.JSON_PROPERTY_TRANSACTION_TYPE,
  TransactionObjectTransactionsInner.JSON_PROPERTY_FOREIGN_ID,
  TransactionObjectTransactionsInner.JSON_PROPERTY_NAME,
  TransactionObjectTransactionsInner.JSON_PROPERTY_DESCRIPTION,
  TransactionObjectTransactionsInner.JSON_PROPERTY_VALUE_DATE,
  TransactionObjectTransactionsInner.JSON_PROPERTY_EXECUTION_DATE,
  TransactionObjectTransactionsInner.JSON_PROPERTY_AMOUNT,
  TransactionObjectTransactionsInner.JSON_PROPERTY_WALLET_DEBIT_BALANCE,
  TransactionObjectTransactionsInner.JSON_PROPERTY_WALLET_CREDIT_BALANCE,
  TransactionObjectTransactionsInner.JSON_PROPERTY_CURRENCY,
  TransactionObjectTransactionsInner.JSON_PROPERTY_CREATED_DATE,
  TransactionObjectTransactionsInner.JSON_PROPERTY_TOTAL_ROWS
})
@JsonTypeName("TransactionObject_transactions_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class TransactionObjectTransactionsInner {
  public static final String JSON_PROPERTY_TRANSACTION_ID = "transactionId";
  @javax.annotation.Nullable
  private Integer transactionId;

  public static final String JSON_PROPERTY_WALLET_DEBIT_ID = "walletDebitId";
  @javax.annotation.Nullable
  private Integer walletDebitId;

  public static final String JSON_PROPERTY_WALLET_CREDIT_ID = "walletCreditId";
  @javax.annotation.Nullable
  private Integer walletCreditId;

  /**
   * The type the transaction. See the [Transactions](/guide/wallets/transactions.html#transaction-types-transactiontype) article for the list of possible values. 
   */
  public enum TransactionTypeEnum {
    PAYIN(String.valueOf("Payin")),
    
    PAYOUT(String.valueOf("Payout")),
    
    TRANSFER(String.valueOf("Transfer")),
    
    PAYIN_REFUND(String.valueOf("Payin Refund")),
    
    CARD_TRANSACTION(String.valueOf("Card Transaction")),
    
    PAYOUT_REFUND(String.valueOf("Payout Refund")),
    
    PAYIN_ACQUIRING(String.valueOf("Payin Acquiring")),
    
    PAYIN_REFUND_ACQUIRING(String.valueOf("Payin Refund Acquiring")),
    
    SCTR_INST(String.valueOf("SCTR Inst")),
    
    PAYIN_SCT_INSTANT_RECALL(String.valueOf("Payin SCT Instant Recall")),
    
    PAYOUT_SCT_INSTANT_EMIT(String.valueOf("Payout SCT Instant Emit")),
    
    PAYIN_SCT_INSTANT_EMIT_RECALL(String.valueOf("Payin SCT Instant Emit Recall")),
    
    CREDIT_TRANSFER_RETURNED(String.valueOf("Credit Transfer Returned")),
    
    CHECK_PAYIN(String.valueOf("Check Payin")),
    
    SDDE(String.valueOf("SDDE")),
    
    SDDR(String.valueOf("SDDR")),
    
    SDDR_REVERSAL(String.valueOf("SDDR Reversal")),
    
    SCTR_RECALL(String.valueOf("SCTR Recall")),
    
    CHECK_REFUND(String.valueOf("Check Refund")),
    
    SCTR(String.valueOf("SCTR"));

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
  @javax.annotation.Nullable
  private TransactionTypeEnum transactionType;

  public static final String JSON_PROPERTY_FOREIGN_ID = "foreignId";
  @javax.annotation.Nullable
  private Integer foreignId;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_VALUE_DATE = "valueDate";
  @javax.annotation.Nullable
  private String valueDate;

  public static final String JSON_PROPERTY_EXECUTION_DATE = "executionDate";
  @javax.annotation.Nullable
  private String executionDate;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nullable
  private Float amount;

  public static final String JSON_PROPERTY_WALLET_DEBIT_BALANCE = "walletDebitBalance";
  @javax.annotation.Nullable
  private Float walletDebitBalance;

  public static final String JSON_PROPERTY_WALLET_CREDIT_BALANCE = "walletCreditBalance";
  @javax.annotation.Nullable
  private Float walletCreditBalance;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  @javax.annotation.Nullable
  private String currency;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  @javax.annotation.Nullable
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_TOTAL_ROWS = "totalRows";
  @javax.annotation.Nullable
  private Integer totalRows;

  public TransactionObjectTransactionsInner() {
  }

  public TransactionObjectTransactionsInner transactionId(@javax.annotation.Nullable Integer transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The unique identifier of the Transaction object.
   * @return transactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTransactionId() {
    return transactionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionId(@javax.annotation.Nullable Integer transactionId) {
    this.transactionId = transactionId;
  }

  public TransactionObjectTransactionsInner walletDebitId(@javax.annotation.Nullable Integer walletDebitId) {
    
    this.walletDebitId = walletDebitId;
    return this;
  }

  /**
   * The unique identifier of the debited Wallet.
   * @return walletDebitId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_DEBIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWalletDebitId() {
    return walletDebitId;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_DEBIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletDebitId(@javax.annotation.Nullable Integer walletDebitId) {
    this.walletDebitId = walletDebitId;
  }

  public TransactionObjectTransactionsInner walletCreditId(@javax.annotation.Nullable Integer walletCreditId) {
    
    this.walletCreditId = walletCreditId;
    return this;
  }

  /**
   * The unique identifier of the credited Wallet.
   * @return walletCreditId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_CREDIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWalletCreditId() {
    return walletCreditId;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_CREDIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletCreditId(@javax.annotation.Nullable Integer walletCreditId) {
    this.walletCreditId = walletCreditId;
  }

  public TransactionObjectTransactionsInner transactionType(@javax.annotation.Nullable TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

  /**
   * The type the transaction. See the [Transactions](/guide/wallets/transactions.html#transaction-types-transactiontype) article for the list of possible values. 
   * @return transactionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(@javax.annotation.Nullable TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

  public TransactionObjectTransactionsInner foreignId(@javax.annotation.Nullable Integer foreignId) {
    
    this.foreignId = foreignId;
    return this;
  }

  /**
   * The unique identifier of the initial operation that created the Transaction (e.g., &#x60;payinId&#x60;, &#x60;payoutId&#x60;, etc.) 
   * @return foreignId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOREIGN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getForeignId() {
    return foreignId;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForeignId(@javax.annotation.Nullable Integer foreignId) {
    this.foreignId = foreignId;
  }

  public TransactionObjectTransactionsInner name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public TransactionObjectTransactionsInner description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Additional information regarding the Transaction.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public TransactionObjectTransactionsInner valueDate(@javax.annotation.Nullable String valueDate) {
    
    this.valueDate = valueDate;
    return this;
  }

  /**
   * The value date of the transaction (date applied for the payment).  Format: YYYY-MM-DD 
   * @return valueDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValueDate() {
    return valueDate;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueDate(@javax.annotation.Nullable String valueDate) {
    this.valueDate = valueDate;
  }

  public TransactionObjectTransactionsInner executionDate(@javax.annotation.Nullable String executionDate) {
    
    this.executionDate = executionDate;
    return this;
  }

  /**
   * The date of the execution of the transaction.  Format: &#x60;YYYY-MM-DD&#x60; 
   * @return executionDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutionDate() {
    return executionDate;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutionDate(@javax.annotation.Nullable String executionDate) {
    this.executionDate = executionDate;
  }

  public TransactionObjectTransactionsInner amount(@javax.annotation.Nullable Float amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@javax.annotation.Nullable Float amount) {
    this.amount = amount;
  }

  public TransactionObjectTransactionsInner walletDebitBalance(@javax.annotation.Nullable Float walletDebitBalance) {
    
    this.walletDebitBalance = walletDebitBalance;
    return this;
  }

  /**
   * The balance of the debited Wallet after the transaction. 
   * @return walletDebitBalance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_DEBIT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getWalletDebitBalance() {
    return walletDebitBalance;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_DEBIT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletDebitBalance(@javax.annotation.Nullable Float walletDebitBalance) {
    this.walletDebitBalance = walletDebitBalance;
  }

  public TransactionObjectTransactionsInner walletCreditBalance(@javax.annotation.Nullable Float walletCreditBalance) {
    
    this.walletCreditBalance = walletCreditBalance;
    return this;
  }

  /**
   * The balance of the credited Wallet after the transaction. 
   * @return walletCreditBalance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_CREDIT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getWalletCreditBalance() {
    return walletCreditBalance;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_CREDIT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletCreditBalance(@javax.annotation.Nullable Float walletCreditBalance) {
    this.walletCreditBalance = walletCreditBalance;
  }

  public TransactionObjectTransactionsInner currency(@javax.annotation.Nullable String currency) {
    
    this.currency = currency;
    return this;
  }

  /**
   * The currency in the [ISO 4217](/guide/api-basics/data-format.html#currencies) format. 
   * @return currency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }

  public TransactionObjectTransactionsInner createdDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date and time at which the transaction was created.  Format: &#x60;YYYY-MM-DD HH:mm:ss&#x60; 
   * @return createdDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public TransactionObjectTransactionsInner totalRows(@javax.annotation.Nullable Integer totalRows) {
    
    this.totalRows = totalRows;
    return this;
  }

  /**
   * The total numbers of objects matching your search, for pagination purposes. Only valued in the first object of the returned page, &#x60;null&#x60; otherwise. 
   * @return totalRows
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalRows() {
    return totalRows;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalRows(@javax.annotation.Nullable Integer totalRows) {
    this.totalRows = totalRows;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionObjectTransactionsInner transactionObjectTransactionsInner = (TransactionObjectTransactionsInner) o;
    return Objects.equals(this.transactionId, transactionObjectTransactionsInner.transactionId) &&
        Objects.equals(this.walletDebitId, transactionObjectTransactionsInner.walletDebitId) &&
        Objects.equals(this.walletCreditId, transactionObjectTransactionsInner.walletCreditId) &&
        Objects.equals(this.transactionType, transactionObjectTransactionsInner.transactionType) &&
        Objects.equals(this.foreignId, transactionObjectTransactionsInner.foreignId) &&
        Objects.equals(this.name, transactionObjectTransactionsInner.name) &&
        Objects.equals(this.description, transactionObjectTransactionsInner.description) &&
        Objects.equals(this.valueDate, transactionObjectTransactionsInner.valueDate) &&
        Objects.equals(this.executionDate, transactionObjectTransactionsInner.executionDate) &&
        Objects.equals(this.amount, transactionObjectTransactionsInner.amount) &&
        Objects.equals(this.walletDebitBalance, transactionObjectTransactionsInner.walletDebitBalance) &&
        Objects.equals(this.walletCreditBalance, transactionObjectTransactionsInner.walletCreditBalance) &&
        Objects.equals(this.currency, transactionObjectTransactionsInner.currency) &&
        Objects.equals(this.createdDate, transactionObjectTransactionsInner.createdDate) &&
        Objects.equals(this.totalRows, transactionObjectTransactionsInner.totalRows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, walletDebitId, walletCreditId, transactionType, foreignId, name, description, valueDate, executionDate, amount, walletDebitBalance, walletCreditBalance, currency, createdDate, totalRows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionObjectTransactionsInner {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    walletDebitId: ").append(toIndentedString(walletDebitId)).append("\n");
    sb.append("    walletCreditId: ").append(toIndentedString(walletCreditId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    foreignId: ").append(toIndentedString(foreignId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("    executionDate: ").append(toIndentedString(executionDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    walletDebitBalance: ").append(toIndentedString(walletDebitBalance)).append("\n");
    sb.append("    walletCreditBalance: ").append(toIndentedString(walletCreditBalance)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    totalRows: ").append(toIndentedString(totalRows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

