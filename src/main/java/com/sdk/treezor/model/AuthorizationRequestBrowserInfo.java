/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AuthorizationRequestBrowserInfo
 */
@JsonPropertyOrder({
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_JAVA_ENABLED,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_JAVASCRIPT_ENABLED,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_IPADDR,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_HTTP_ACCEPT,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_HTTP_USER_AGENT,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_LANGUAGE,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_COLOR_DEPTH,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_SCREEN_HEIGHT,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_SCREEN_WIDTH,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_TIMEZONE,
  AuthorizationRequestBrowserInfo.JSON_PROPERTY_DEVICE_FINGERPRINT
})
@JsonTypeName("AuthorizationRequest_browserInfo")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class AuthorizationRequestBrowserInfo {
  public static final String JSON_PROPERTY_JAVA_ENABLED = "javaEnabled";
  @javax.annotation.Nullable
  private Boolean javaEnabled;

  public static final String JSON_PROPERTY_JAVASCRIPT_ENABLED = "javascriptEnabled";
  @javax.annotation.Nullable
  private Boolean javascriptEnabled;

  public static final String JSON_PROPERTY_IPADDR = "ipaddr";
  @javax.annotation.Nullable
  private String ipaddr;

  public static final String JSON_PROPERTY_HTTP_ACCEPT = "httpAccept";
  @javax.annotation.Nullable
  private String httpAccept;

  public static final String JSON_PROPERTY_HTTP_USER_AGENT = "httpUserAgent";
  @javax.annotation.Nullable
  private String httpUserAgent;

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  @javax.annotation.Nullable
  private String language;

  /**
   * Value representing the depth of the color palette to display an image, in bits/pixel 
   */
  public enum ColorDepthEnum {
    NUMBER_1(Integer.valueOf(1)),
    
    NUMBER_4(Integer.valueOf(4)),
    
    NUMBER_8(Integer.valueOf(8)),
    
    NUMBER_15(Integer.valueOf(15)),
    
    NUMBER_16(Integer.valueOf(16)),
    
    NUMBER_32(Integer.valueOf(32)),
    
    NUMBER_48(Integer.valueOf(48));

    private Integer value;

    ColorDepthEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColorDepthEnum fromValue(Integer value) {
      for (ColorDepthEnum b : ColorDepthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COLOR_DEPTH = "colorDepth";
  @javax.annotation.Nullable
  private ColorDepthEnum colorDepth;

  public static final String JSON_PROPERTY_SCREEN_HEIGHT = "screenHeight";
  @javax.annotation.Nullable
  private Integer screenHeight;

  public static final String JSON_PROPERTY_SCREEN_WIDTH = "screenWidth";
  @javax.annotation.Nullable
  private Integer screenWidth;

  public static final String JSON_PROPERTY_TIMEZONE = "timezone";
  @javax.annotation.Nullable
  private String timezone;

  public static final String JSON_PROPERTY_DEVICE_FINGERPRINT = "deviceFingerprint";
  @javax.annotation.Nullable
  private String deviceFingerprint;

  public AuthorizationRequestBrowserInfo() {
  }

  public AuthorizationRequestBrowserInfo javaEnabled(@javax.annotation.Nullable Boolean javaEnabled) {
    
    this.javaEnabled = javaEnabled;
    return this;
  }

  /**
   * Represents the ability of the device&#39;s browser to run Java, when applicable 
   * @return javaEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JAVA_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getJavaEnabled() {
    return javaEnabled;
  }


  @JsonProperty(JSON_PROPERTY_JAVA_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJavaEnabled(@javax.annotation.Nullable Boolean javaEnabled) {
    this.javaEnabled = javaEnabled;
  }

  public AuthorizationRequestBrowserInfo javascriptEnabled(@javax.annotation.Nullable Boolean javascriptEnabled) {
    
    this.javascriptEnabled = javascriptEnabled;
    return this;
  }

  /**
   * Represents the ability for the client&#39;s browser to run JavaScript 
   * @return javascriptEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JAVASCRIPT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getJavascriptEnabled() {
    return javascriptEnabled;
  }


  @JsonProperty(JSON_PROPERTY_JAVASCRIPT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJavascriptEnabled(@javax.annotation.Nullable Boolean javascriptEnabled) {
    this.javascriptEnabled = javascriptEnabled;
  }

  public AuthorizationRequestBrowserInfo ipaddr(@javax.annotation.Nullable String ipaddr) {
    
    this.ipaddr = ipaddr;
    return this;
  }

  /**
   * The IP address of the end user making a top-up
   * @return ipaddr
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IPADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIpaddr() {
    return ipaddr;
  }


  @JsonProperty(JSON_PROPERTY_IPADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpaddr(@javax.annotation.Nullable String ipaddr) {
    this.ipaddr = ipaddr;
  }

  public AuthorizationRequestBrowserInfo httpAccept(@javax.annotation.Nullable String httpAccept) {
    
    this.httpAccept = httpAccept;
    return this;
  }

  /**
   * This element must include the exact content of the HTTP Accept header, as sent to the Treezor customer from the end user 
   * @return httpAccept
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_ACCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpAccept() {
    return httpAccept;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_ACCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpAccept(@javax.annotation.Nullable String httpAccept) {
    this.httpAccept = httpAccept;
  }

  public AuthorizationRequestBrowserInfo httpUserAgent(@javax.annotation.Nullable String httpUserAgent) {
    
    this.httpUserAgent = httpUserAgent;
    return this;
  }

  /**
   * This element must include the exact content of the User_Agent HTTP header, as sent to the Treezor customer from the end user 
   * @return httpUserAgent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpUserAgent() {
    return httpUserAgent;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpUserAgent(@javax.annotation.Nullable String httpUserAgent) {
    this.httpUserAgent = httpUserAgent;
  }

  public AuthorizationRequestBrowserInfo language(@javax.annotation.Nullable String language) {
    
    this.language = language;
    return this;
  }

  /**
   * Value representing the client&#39;s browser language as defined in IETF-BCP47 
   * @return language
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }

  public AuthorizationRequestBrowserInfo colorDepth(@javax.annotation.Nullable ColorDepthEnum colorDepth) {
    
    this.colorDepth = colorDepth;
    return this;
  }

  /**
   * Value representing the depth of the color palette to display an image, in bits/pixel 
   * @return colorDepth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColorDepthEnum getColorDepth() {
    return colorDepth;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorDepth(@javax.annotation.Nullable ColorDepthEnum colorDepth) {
    this.colorDepth = colorDepth;
  }

  public AuthorizationRequestBrowserInfo screenHeight(@javax.annotation.Nullable Integer screenHeight) {
    
    this.screenHeight = screenHeight;
    return this;
  }

  /**
   * Total height of the device screen (in pixels), when applicable
   * @return screenHeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCREEN_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getScreenHeight() {
    return screenHeight;
  }


  @JsonProperty(JSON_PROPERTY_SCREEN_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScreenHeight(@javax.annotation.Nullable Integer screenHeight) {
    this.screenHeight = screenHeight;
  }

  public AuthorizationRequestBrowserInfo screenWidth(@javax.annotation.Nullable Integer screenWidth) {
    
    this.screenWidth = screenWidth;
    return this;
  }

  /**
   * Total width of the end user screen (in pixels)
   * @return screenWidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCREEN_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getScreenWidth() {
    return screenWidth;
  }


  @JsonProperty(JSON_PROPERTY_SCREEN_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScreenWidth(@javax.annotation.Nullable Integer screenWidth) {
    this.screenWidth = screenWidth;
  }

  public AuthorizationRequestBrowserInfo timezone(@javax.annotation.Nullable String timezone) {
    
    this.timezone = timezone;
    return this;
  }

  /**
   * Time difference in minutes between UTC and cardholder&#39;s browser local time 
   * @return timezone
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimezone() {
    return timezone;
  }


  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }

  public AuthorizationRequestBrowserInfo deviceFingerprint(@javax.annotation.Nullable String deviceFingerprint) {
    
    this.deviceFingerprint = deviceFingerprint;
    return this;
  }

  /**
   * Get deviceFingerprint
   * @return deviceFingerprint
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeviceFingerprint() {
    return deviceFingerprint;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceFingerprint(@javax.annotation.Nullable String deviceFingerprint) {
    this.deviceFingerprint = deviceFingerprint;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationRequestBrowserInfo authorizationRequestBrowserInfo = (AuthorizationRequestBrowserInfo) o;
    return Objects.equals(this.javaEnabled, authorizationRequestBrowserInfo.javaEnabled) &&
        Objects.equals(this.javascriptEnabled, authorizationRequestBrowserInfo.javascriptEnabled) &&
        Objects.equals(this.ipaddr, authorizationRequestBrowserInfo.ipaddr) &&
        Objects.equals(this.httpAccept, authorizationRequestBrowserInfo.httpAccept) &&
        Objects.equals(this.httpUserAgent, authorizationRequestBrowserInfo.httpUserAgent) &&
        Objects.equals(this.language, authorizationRequestBrowserInfo.language) &&
        Objects.equals(this.colorDepth, authorizationRequestBrowserInfo.colorDepth) &&
        Objects.equals(this.screenHeight, authorizationRequestBrowserInfo.screenHeight) &&
        Objects.equals(this.screenWidth, authorizationRequestBrowserInfo.screenWidth) &&
        Objects.equals(this.timezone, authorizationRequestBrowserInfo.timezone) &&
        Objects.equals(this.deviceFingerprint, authorizationRequestBrowserInfo.deviceFingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(javaEnabled, javascriptEnabled, ipaddr, httpAccept, httpUserAgent, language, colorDepth, screenHeight, screenWidth, timezone, deviceFingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationRequestBrowserInfo {\n");
    sb.append("    javaEnabled: ").append(toIndentedString(javaEnabled)).append("\n");
    sb.append("    javascriptEnabled: ").append(toIndentedString(javascriptEnabled)).append("\n");
    sb.append("    ipaddr: ").append(toIndentedString(ipaddr)).append("\n");
    sb.append("    httpAccept: ").append(toIndentedString(httpAccept)).append("\n");
    sb.append("    httpUserAgent: ").append(toIndentedString(httpUserAgent)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    colorDepth: ").append(toIndentedString(colorDepth)).append("\n");
    sb.append("    screenHeight: ").append(toIndentedString(screenHeight)).append("\n");
    sb.append("    screenWidth: ").append(toIndentedString(screenWidth)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    deviceFingerprint: ").append(toIndentedString(deviceFingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

