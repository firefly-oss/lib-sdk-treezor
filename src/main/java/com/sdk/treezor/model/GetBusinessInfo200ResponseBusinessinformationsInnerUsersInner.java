/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner
 */
@JsonPropertyOrder({
  GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.JSON_PROPERTY_FIRSTNAME,
  GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.JSON_PROPERTY_LASTNAME,
  GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.JSON_PROPERTY_FULLNAMES,
  GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.JSON_PROPERTY_BIRTHDAY,
  GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.JSON_PROPERTY_PARENT_TYPE
})
@JsonTypeName("getBusinessInfo_200_response_businessinformations_inner_users_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner {
  public static final String JSON_PROPERTY_FIRSTNAME = "firstname";
  @javax.annotation.Nullable
  private String firstname;

  public static final String JSON_PROPERTY_LASTNAME = "lastname";
  @javax.annotation.Nullable
  private String lastname;

  public static final String JSON_PROPERTY_FULLNAMES = "fullnames";
  @javax.annotation.Nullable
  private String fullnames;

  public static final String JSON_PROPERTY_BIRTHDAY = "birthday";
  @javax.annotation.Nullable
  private String birthday;

  /**
   * Representative&#39;s position in company
   */
  public enum ParentTypeEnum {
    ACCOUNTS_CONTROLLER(String.valueOf("Accounts controller")),
    
    ACTIVE_PARTNER(String.valueOf("Active partner")),
    
    ADMINISTRATIVE_DIRECTOR(String.valueOf("Administrative director")),
    
    ADMINISTRATOR(String.valueOf("Administrator")),
    
    AUDITOR(String.valueOf("Auditor")),
    
    AUTHORIZED_AGENT(String.valueOf("Authorized agent")),
    
    CENSOR(String.valueOf("Censor")),
    
    CHAIRMAN_OF_THE_BOARD(String.valueOf("Chairman of the Board")),
    
    CHIEF_EXECUTIVE_OFFICER(String.valueOf("Chief Executive Officer")),
    
    CHIEF_TECHNICAL_OFFICER(String.valueOf("Chief Technical Officer")),
    
    CHIEF_ACCOUNTANT(String.valueOf("Chief accountant")),
    
    CO_MANAGING_PARTNER(String.valueOf("Co-managing partner")),
    
    CONCILIATOR(String.valueOf("Conciliator")),
    
    CONCORDAT_COMMISSIONER(String.valueOf("Concordat commissioner")),
    
    DELEGATED_ADMINISTRATOR(String.valueOf("Delegated administrator")),
    
    DELEGATED_MANAGING_DIRECTOR(String.valueOf("Delegated managing director")),
    
    DEPUTY_AUDITOR(String.valueOf("Deputy auditor")),
    
    DEPUTY_GOVERNOR(String.valueOf("Deputy governor")),
    
    DEPUTY_MANAGING_DIRECTOR(String.valueOf("Deputy managing director")),
    
    DEVELOPER(String.valueOf("Developer")),
    
    FINANCIAL_DIRECTOR(String.valueOf("Financial director")),
    
    GENERAL_SECRETARY(String.valueOf("General secretary")),
    
    GOVERNOR(String.valueOf("Governor")),
    
    GUARDIAN(String.valueOf("Guardian")),
    
    HONORARY_PRESIDENT(String.valueOf("Honorary president")),
    
    JUDGE_COMMISSIONER(String.valueOf("Judge-commissioner")),
    
    JUDICIAL_REPRESENTATIVE(String.valueOf("Judicial representative")),
    
    LIQUIDATOR(String.valueOf("Liquidator")),
    
    MANAGEMENT_ADVISOR(String.valueOf("Management advisor")),
    
    MANAGEMENT_AGENT(String.valueOf("Management agent")),
    
    MANAGEMENT_CONTROLLER(String.valueOf("Management controller")),
    
    MANAGER(String.valueOf("Manager")),
    
    MANAGING_DIRECTOR(String.valueOf("Managing director")),
    
    MANAGING_DIRECTOR_NOT_ADMINISTRATOR(String.valueOf("Managing director not administrator")),
    
    MEMBER(String.valueOf("Member")),
    
    MEMBER_OF_THE_CONTROL_COMMITTEE(String.valueOf("Member of the control committee")),
    
    MEMBER_OF_THE_CONTROL_COUNCIL(String.valueOf("Member of the control council")),
    
    MEMBER_OF_THE_MANAGEMENT_BOARD(String.valueOf("Member of the management board")),
    
    MEMBER_OF_THE_MANAGEMENT_COUNCIL(String.valueOf("Member of the management council")),
    
    MEMBER_OF_THE_SUPERVISORY_COUNCIL(String.valueOf("Member of the supervisory council")),
    
    NOT_ASSOCIATED_MANAGER(String.valueOf("Not associated manager")),
    
    OTHER_MANAGER(String.valueOf("Other manager")),
    
    PARTNER(String.valueOf("Partner")),
    
    PERSON_HAVING_THE_POWER_TO_USUALLY_INVOLVE_THE_COMPANY(String.valueOf("Person having the power to usually involve the company")),
    
    PERSON_IN_CHARGE_ABROAD(String.valueOf("Person in charge abroad")),
    
    PERSONAL_BUSINESS_MANAGER(String.valueOf("Personal business manager")),
    
    PLAN_COMMISSIONER(String.valueOf("Plan commissioner")),
    
    PRESIDENT(String.valueOf("President")),
    
    PRESIDENT_OF_THE_CONTROL_COUNCIL(String.valueOf("President of the control council")),
    
    PRESIDENT_OF_THE_MANAGEMENT_BOARD(String.valueOf("President of the management board")),
    
    PRESIDENT_OF_THE_SUPERVISORY_COUNCIL(String.valueOf("President of the supervisory council")),
    
    RECEIVER(String.valueOf("Receiver")),
    
    RECEIVER_REPRESENTATIVE_OF_THE_CREDITORS(String.valueOf("Receiver/representative of the creditors")),
    
    REPRESENTATIVE_IN_FRANCE(String.valueOf("Representative in France")),
    
    REPRESENTATIVE_IN_FRANCE_OF_A_FOREIGN_COMPANY(String.valueOf("Representative in France of a foreign company")),
    
    REPRESENTATIVE_OF_THE_CREDITORS(String.valueOf("Representative of the creditors")),
    
    SALES_DIRECTOR(String.valueOf("Sales director")),
    
    SECRETARY(String.valueOf("Secretary")),
    
    SPOUSE_ASSOCIATE(String.valueOf("Spouse-associate")),
    
    STATUTORY_AUDITOR(String.valueOf("Statutory auditor")),
    
    SUBSTITUTE_JUDGE_COMMISSIONER(String.valueOf("Substitute judge-commissioner")),
    
    SUPERVISION_COMMISSIONER(String.valueOf("Supervision commissioner")),
    
    TEMPORARY_ADMINISTRATOR(String.valueOf("Temporary administrator")),
    
    TREASURER(String.valueOf("Treasurer")),
    
    UNIQUE_MANAGING_DIRECTOR(String.valueOf("Unique managing director")),
    
    VICE_PRESIDENT(String.valueOf("Vice-president")),
    
    VICE_PRESIDENT_OF_THE_MANAGEMENT_BOARD(String.valueOf("Vice-president of the management board")),
    
    VICE_PRESIDENT_OF_THE_SUPERVISORY_COUNCIL(String.valueOf("Vice-president of the supervisory council"));

    private String value;

    ParentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ParentTypeEnum fromValue(String value) {
      for (ParentTypeEnum b : ParentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PARENT_TYPE = "parentType";
  @javax.annotation.Nullable
  private ParentTypeEnum parentType;

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner() {
  }

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner firstname(@javax.annotation.Nullable String firstname) {
    
    this.firstname = firstname;
    return this;
  }

  /**
   * Representative&#39;s first name.
   * @return firstname
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstname() {
    return firstname;
  }


  @JsonProperty(JSON_PROPERTY_FIRSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstname(@javax.annotation.Nullable String firstname) {
    this.firstname = firstname;
  }

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner lastname(@javax.annotation.Nullable String lastname) {
    
    this.lastname = lastname;
    return this;
  }

  /**
   * Representative&#39;s last name.
   * @return lastname
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LASTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastname() {
    return lastname;
  }


  @JsonProperty(JSON_PROPERTY_LASTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastname(@javax.annotation.Nullable String lastname) {
    this.lastname = lastname;
  }

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner fullnames(@javax.annotation.Nullable String fullnames) {
    
    this.fullnames = fullnames;
    return this;
  }

  /**
   * Representative&#39;s full names.
   * @return fullnames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FULLNAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullnames() {
    return fullnames;
  }


  @JsonProperty(JSON_PROPERTY_FULLNAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullnames(@javax.annotation.Nullable String fullnames) {
    this.fullnames = fullnames;
  }

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner birthday(@javax.annotation.Nullable String birthday) {
    
    this.birthday = birthday;
    return this;
  }

  /**
   * Representative&#39;s birthdate. Format YYYY-MM-DD
   * @return birthday
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIRTHDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBirthday() {
    return birthday;
  }


  @JsonProperty(JSON_PROPERTY_BIRTHDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBirthday(@javax.annotation.Nullable String birthday) {
    this.birthday = birthday;
  }

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner parentType(@javax.annotation.Nullable ParentTypeEnum parentType) {
    
    this.parentType = parentType;
    return this;
  }

  /**
   * Representative&#39;s position in company
   * @return parentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ParentTypeEnum getParentType() {
    return parentType;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentType(@javax.annotation.Nullable ParentTypeEnum parentType) {
    this.parentType = parentType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner getBusinessInfo200ResponseBusinessinformationsInnerUsersInner = (GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner) o;
    return Objects.equals(this.firstname, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.firstname) &&
        Objects.equals(this.lastname, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.lastname) &&
        Objects.equals(this.fullnames, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.fullnames) &&
        Objects.equals(this.birthday, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.birthday) &&
        Objects.equals(this.parentType, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.parentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstname, lastname, fullnames, birthday, parentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner {\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    fullnames: ").append(toIndentedString(fullnames)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    parentType: ").append(toIndentedString(parentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

