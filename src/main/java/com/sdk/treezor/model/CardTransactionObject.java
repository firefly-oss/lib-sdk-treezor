/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardTransactionObject
 */
@JsonPropertyOrder({
  CardTransactionObject.JSON_PROPERTY_CARDTRANSACTION_ID,
  CardTransactionObject.JSON_PROPERTY_CARD_ID,
  CardTransactionObject.JSON_PROPERTY_WALLET_ID,
  CardTransactionObject.JSON_PROPERTY_ACQUIRER_ID,
  CardTransactionObject.JSON_PROPERTY_WALLET_CURRENCY,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_ID,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_NAME,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_CITY,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_COUNTRY,
  CardTransactionObject.JSON_PROPERTY_MCC_CODE,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_LOCAL_TIME,
  CardTransactionObject.JSON_PROPERTY_PUBLIC_TOKEN,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_AMOUNT,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_CURRENCY,
  CardTransactionObject.JSON_PROPERTY_FEES,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_COUNTRY,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_ID,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_STATUS,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_LOCAL_AMOUNT,
  CardTransactionObject.JSON_PROPERTY_POS_CARDHOLDER_PRESENCE,
  CardTransactionObject.JSON_PROPERTY_POS_POSTCODE,
  CardTransactionObject.JSON_PROPERTY_POS_COUNTRY,
  CardTransactionObject.JSON_PROPERTY_POS_TERMINAL_ID,
  CardTransactionObject.JSON_PROPERTY_POS_CARD_PRESENCE,
  CardTransactionObject.JSON_PROPERTY_PAN_ENTRY_METHOD,
  CardTransactionObject.JSON_PROPERTY_AUTHORIZATION_NOTE,
  CardTransactionObject.JSON_PROPERTY_AUTHORIZATION_RESPONSE_CODE,
  CardTransactionObject.JSON_PROPERTY_AUTHORIZATION_ISSUER_ID,
  CardTransactionObject.JSON_PROPERTY_AUTHORIZATION_ISSUER_TIME,
  CardTransactionObject.JSON_PROPERTY_AUTHORIZATION_MTI,
  CardTransactionObject.JSON_PROPERTY_AUTHORIZED_BALANCE,
  CardTransactionObject.JSON_PROPERTY_LIMIT_ATM_YEAR,
  CardTransactionObject.JSON_PROPERTY_LIMIT_ATM_MONTH,
  CardTransactionObject.JSON_PROPERTY_LIMIT_ATM_WEEK,
  CardTransactionObject.JSON_PROPERTY_LIMIT_ATM_DAY,
  CardTransactionObject.JSON_PROPERTY_LIMIT_ATM_ALL,
  CardTransactionObject.JSON_PROPERTY_LIMIT_PAYMENT_YEAR,
  CardTransactionObject.JSON_PROPERTY_LIMIT_PAYMENT_MONTH,
  CardTransactionObject.JSON_PROPERTY_LIMIT_PAYMENT_WEEK,
  CardTransactionObject.JSON_PROPERTY_LIMIT_PAYMENT_DAY,
  CardTransactionObject.JSON_PROPERTY_LIMIT_PAYMENT_ALL,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_ATM_YEAR,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_ATM_MONTH,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_ATM_WEEK,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_ATM_DAY,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_ATM_ALL,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_YEAR,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_MONTH,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_WEEK,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_DAY,
  CardTransactionObject.JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_ALL,
  CardTransactionObject.JSON_PROPERTY_CARD_DIGITALIZATION_EXTERNAL_ID,
  CardTransactionObject.JSON_PROPERTY_IS3_D_S,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_ADDRESS,
  CardTransactionObject.JSON_PROPERTY_PAYMENT_LOCAL_DATE,
  CardTransactionObject.JSON_PROPERTY_TOTAL_ROWS,
  CardTransactionObject.JSON_PROPERTY_OPTIMIZED_MERCHANT_NAME,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_LOGO,
  CardTransactionObject.JSON_PROPERTY_MERCHANT_CATEGORY,
  CardTransactionObject.JSON_PROPERTY_TRANSACTION_SUBTYPE,
  CardTransactionObject.JSON_PROPERTY_3DS_EXEMPTION_TYPE,
  CardTransactionObject.JSON_PROPERTY_RECEIVER_DATA,
  CardTransactionObject.JSON_PROPERTY_SENDER_DATA,
  CardTransactionObject.JSON_PROPERTY_TRANSACTION_TYPE_IDENTIFIER,
  CardTransactionObject.JSON_PROPERTY_LOCAL_MERCHANT_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class CardTransactionObject {
  public static final String JSON_PROPERTY_CARDTRANSACTION_ID = "cardtransactionId";
  @javax.annotation.Nullable
  private String cardtransactionId;

  public static final String JSON_PROPERTY_CARD_ID = "cardId";
  @javax.annotation.Nullable
  private String cardId;

  public static final String JSON_PROPERTY_WALLET_ID = "walletId";
  @javax.annotation.Nullable
  private String walletId;

  public static final String JSON_PROPERTY_ACQUIRER_ID = "acquirerId";
  @javax.annotation.Nullable
  private String acquirerId;

  public static final String JSON_PROPERTY_WALLET_CURRENCY = "walletCurrency";
  @javax.annotation.Nullable
  private String walletCurrency;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  @javax.annotation.Nullable
  private String merchantId;

  public static final String JSON_PROPERTY_MERCHANT_NAME = "merchantName";
  @javax.annotation.Nullable
  private String merchantName;

  public static final String JSON_PROPERTY_MERCHANT_CITY = "merchantCity";
  @javax.annotation.Nullable
  private String merchantCity;

  public static final String JSON_PROPERTY_MERCHANT_COUNTRY = "merchantCountry";
  @javax.annotation.Nullable
  private String merchantCountry;

  public static final String JSON_PROPERTY_MCC_CODE = "mccCode";
  @javax.annotation.Nullable
  private String mccCode;

  public static final String JSON_PROPERTY_PAYMENT_LOCAL_TIME = "paymentLocalTime";
  @javax.annotation.Nullable
  private String paymentLocalTime;

  public static final String JSON_PROPERTY_PUBLIC_TOKEN = "publicToken";
  @javax.annotation.Nullable
  private String publicToken;

  public static final String JSON_PROPERTY_PAYMENT_AMOUNT = "paymentAmount";
  @javax.annotation.Nullable
  private Float paymentAmount;

  public static final String JSON_PROPERTY_PAYMENT_CURRENCY = "paymentCurrency";
  @javax.annotation.Nullable
  private String paymentCurrency;

  public static final String JSON_PROPERTY_FEES = "fees";
  @javax.annotation.Nullable
  private String fees;

  public static final String JSON_PROPERTY_PAYMENT_COUNTRY = "paymentCountry";
  @javax.annotation.Nullable
  private String paymentCountry;

  public static final String JSON_PROPERTY_PAYMENT_ID = "paymentId";
  @javax.annotation.Nullable
  private String paymentId;

  /**
   * The status of the payment. See the [Statuses](/guide/cards/transactions.html#statuses-paymentstatus) article for more information. 
   */
  public enum PaymentStatusEnum {
    A(String.valueOf("A")),
    
    C(String.valueOf("C")),
    
    I(String.valueOf("I")),
    
    M(String.valueOf("M")),
    
    R(String.valueOf("R")),
    
    S(String.valueOf("S")),
    
    V(String.valueOf("V"));

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_STATUS = "paymentStatus";
  @javax.annotation.Nullable
  private PaymentStatusEnum paymentStatus;

  public static final String JSON_PROPERTY_PAYMENT_LOCAL_AMOUNT = "paymentLocalAmount";
  @javax.annotation.Nullable
  private Float paymentLocalAmount;

  /**
   * Indicates whether the cardholder was physically present, and if not, how they ordered the card transaction.  See [Cardholder Presence](/guide/cards/transactions.html#cardholder-presence-poscardholderpresence) for more information. 
   */
  public enum PosCardholderPresenceEnum {
    _0(String.valueOf("0")),
    
    _1(String.valueOf("1")),
    
    _2(String.valueOf("2")),
    
    _3(String.valueOf("3")),
    
    _4(String.valueOf("4")),
    
    _5(String.valueOf("5")),
    
    _6(String.valueOf("6")),
    
    _9(String.valueOf("9"));

    private String value;

    PosCardholderPresenceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PosCardholderPresenceEnum fromValue(String value) {
      for (PosCardholderPresenceEnum b : PosCardholderPresenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POS_CARDHOLDER_PRESENCE = "posCardholderPresence";
  @javax.annotation.Nullable
  private PosCardholderPresenceEnum posCardholderPresence;

  public static final String JSON_PROPERTY_POS_POSTCODE = "posPostcode";
  @javax.annotation.Nullable
  private String posPostcode;

  public static final String JSON_PROPERTY_POS_COUNTRY = "posCountry";
  @javax.annotation.Nullable
  private String posCountry;

  public static final String JSON_PROPERTY_POS_TERMINAL_ID = "posTerminalId";
  @javax.annotation.Nullable
  private String posTerminalId;

  /**
   * Indicates whether the card was physically present during the transaction:  * &#x60;0&#x60; – The card was present * &#x60;1&#x60; – The card was absent * &#x60;9&#x60; – The card presence **cannot be determined 
   */
  public enum PosCardPresenceEnum {
    _0(String.valueOf("0")),
    
    _1(String.valueOf("1")),
    
    _9(String.valueOf("9"));

    private String value;

    PosCardPresenceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PosCardPresenceEnum fromValue(String value) {
      for (PosCardPresenceEnum b : PosCardPresenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POS_CARD_PRESENCE = "posCardPresence";
  @javax.annotation.Nullable
  private PosCardPresenceEnum posCardPresence;

  /**
   * Indicates how the merchant captured the [PAN](/guide/overview/glossary.html#primary-account-number-pan). See [PAN Entry Method](/guide/cards/transactions.html#pan-entry-method-panentrymethod) for more information. 
   */
  public enum PanEntryMethodEnum {
    _0(String.valueOf("0")),
    
    _1(String.valueOf("1")),
    
    _2(String.valueOf("2")),
    
    _3(String.valueOf("3")),
    
    _4(String.valueOf("4")),
    
    _5(String.valueOf("5")),
    
    _7(String.valueOf("7")),
    
    _10(String.valueOf("10")),
    
    _79(String.valueOf("79")),
    
    _80(String.valueOf("80")),
    
    _81(String.valueOf("81")),
    
    _91(String.valueOf("91"));

    private String value;

    PanEntryMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PanEntryMethodEnum fromValue(String value) {
      for (PanEntryMethodEnum b : PanEntryMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAN_ENTRY_METHOD = "panEntryMethod";
  @javax.annotation.Nullable
  private PanEntryMethodEnum panEntryMethod;

  public static final String JSON_PROPERTY_AUTHORIZATION_NOTE = "authorizationNote";
  @javax.annotation.Nullable
  private String authorizationNote;

  public static final String JSON_PROPERTY_AUTHORIZATION_RESPONSE_CODE = "authorizationResponseCode";
  @javax.annotation.Nullable
  private String authorizationResponseCode;

  public static final String JSON_PROPERTY_AUTHORIZATION_ISSUER_ID = "authorizationIssuerId";
  @javax.annotation.Nullable
  private String authorizationIssuerId;

  public static final String JSON_PROPERTY_AUTHORIZATION_ISSUER_TIME = "authorizationIssuerTime";
  @javax.annotation.Nullable
  private OffsetDateTime authorizationIssuerTime;

  public static final String JSON_PROPERTY_AUTHORIZATION_MTI = "authorizationMti";
  @javax.annotation.Nullable
  private String authorizationMti;

  public static final String JSON_PROPERTY_AUTHORIZED_BALANCE = "authorizedBalance";
  @javax.annotation.Nullable
  private Float authorizedBalance;

  public static final String JSON_PROPERTY_LIMIT_ATM_YEAR = "limitAtmYear";
  @javax.annotation.Nullable
  private String limitAtmYear;

  public static final String JSON_PROPERTY_LIMIT_ATM_MONTH = "limitAtmMonth";
  @javax.annotation.Nullable
  private String limitAtmMonth;

  public static final String JSON_PROPERTY_LIMIT_ATM_WEEK = "limitAtmWeek";
  @javax.annotation.Nullable
  private String limitAtmWeek;

  public static final String JSON_PROPERTY_LIMIT_ATM_DAY = "limitAtmDay";
  @javax.annotation.Nullable
  private String limitAtmDay;

  public static final String JSON_PROPERTY_LIMIT_ATM_ALL = "limitAtmAll";
  @javax.annotation.Nullable
  private String limitAtmAll;

  public static final String JSON_PROPERTY_LIMIT_PAYMENT_YEAR = "limitPaymentYear";
  @javax.annotation.Nullable
  private String limitPaymentYear;

  public static final String JSON_PROPERTY_LIMIT_PAYMENT_MONTH = "limitPaymentMonth";
  @javax.annotation.Nullable
  private String limitPaymentMonth;

  public static final String JSON_PROPERTY_LIMIT_PAYMENT_WEEK = "limitPaymentWeek";
  @javax.annotation.Nullable
  private String limitPaymentWeek;

  public static final String JSON_PROPERTY_LIMIT_PAYMENT_DAY = "limitPaymentDay";
  @javax.annotation.Nullable
  private String limitPaymentDay;

  public static final String JSON_PROPERTY_LIMIT_PAYMENT_ALL = "limitPaymentAll";
  @javax.annotation.Nullable
  private String limitPaymentAll;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_ATM_YEAR = "totalLimitAtmYear";
  @javax.annotation.Nullable
  private Float totalLimitAtmYear;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_ATM_MONTH = "totalLimitAtmMonth";
  @javax.annotation.Nullable
  private Float totalLimitAtmMonth;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_ATM_WEEK = "totalLimitAtmWeek";
  @javax.annotation.Nullable
  private Float totalLimitAtmWeek;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_ATM_DAY = "totalLimitAtmDay";
  @javax.annotation.Nullable
  private Float totalLimitAtmDay;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_ATM_ALL = "totalLimitAtmAll";
  @javax.annotation.Nullable
  private Float totalLimitAtmAll;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_YEAR = "totalLimitPaymentYear";
  @javax.annotation.Nullable
  private Float totalLimitPaymentYear;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_MONTH = "totalLimitPaymentMonth";
  @javax.annotation.Nullable
  private Float totalLimitPaymentMonth;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_WEEK = "totalLimitPaymentWeek";
  @javax.annotation.Nullable
  private Float totalLimitPaymentWeek;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_DAY = "totalLimitPaymentDay";
  @javax.annotation.Nullable
  private Float totalLimitPaymentDay;

  public static final String JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_ALL = "totalLimitPaymentAll";
  @javax.annotation.Nullable
  private Float totalLimitPaymentAll;

  public static final String JSON_PROPERTY_CARD_DIGITALIZATION_EXTERNAL_ID = "cardDigitalizationExternalId";
  @javax.annotation.Nullable
  private String cardDigitalizationExternalId;

  /**
   * Indicates whether [3DSecure](/guide/overview/glossary#_3ds-3d-secure) was used for authentication: * &#x60;0&#x60; – 3DS was not used * &#x60;1&#x60; – 3DS was used 
   */
  public enum Is3DSEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    Is3DSEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static Is3DSEnum fromValue(Integer value) {
      for (Is3DSEnum b : Is3DSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IS3_D_S = "is3DS";
  @javax.annotation.Nullable
  private Is3DSEnum is3DS;

  public static final String JSON_PROPERTY_MERCHANT_ADDRESS = "merchantAddress";
  @javax.annotation.Nullable
  private String merchantAddress;

  public static final String JSON_PROPERTY_PAYMENT_LOCAL_DATE = "paymentLocalDate";
  @javax.annotation.Nullable
  private String paymentLocalDate;

  public static final String JSON_PROPERTY_TOTAL_ROWS = "totalRows";
  @javax.annotation.Nullable
  private Integer totalRows;

  public static final String JSON_PROPERTY_OPTIMIZED_MERCHANT_NAME = "optimizedMerchantName";
  @javax.annotation.Nullable
  private String optimizedMerchantName;

  public static final String JSON_PROPERTY_MERCHANT_LOGO = "merchantLogo";
  @javax.annotation.Nullable
  private URI merchantLogo;

  public static final String JSON_PROPERTY_MERCHANT_CATEGORY = "merchantCategory";
  @javax.annotation.Nullable
  private String merchantCategory;

  /**
   * Additional information regarding the type of card transaction. Values can be:   * &#x60;OFT&#x60; – Offline transaction   * &#x60;PRE&#x60; – Preauthorization   * &#x60;SEP&#x60; – Second presentment 
   */
  public enum TransactionSubtypeEnum {
    OFT(String.valueOf("OFT")),
    
    PRE(String.valueOf("PRE")),
    
    SEP(String.valueOf("SEP"));

    private String value;

    TransactionSubtypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionSubtypeEnum fromValue(String value) {
      for (TransactionSubtypeEnum b : TransactionSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSACTION_SUBTYPE = "transactionSubtype";
  @javax.annotation.Nullable
  private TransactionSubtypeEnum transactionSubtype;

  public static final String JSON_PROPERTY_3DS_EXEMPTION_TYPE = "3dsExemptionType";
  @javax.annotation.Nullable
  private String _3dsExemptionType;

  public static final String JSON_PROPERTY_RECEIVER_DATA = "receiverData";
  @javax.annotation.Nullable
  private String receiverData;

  public static final String JSON_PROPERTY_SENDER_DATA = "senderData";
  @javax.annotation.Nullable
  private String senderData;

  /**
   * For MoneySend transactions, code indicating the type of transaction and the source of funds. Can be:   * &#x60;C07&#x60; – Person-to-Person Transfer   * &#x60;C52&#x60; – General Transfer to Own Account   * &#x60;C53&#x60; – Agent Cash Out   * &#x60;C54&#x60; – Payment of Own Credit Card Bill   * &#x60;C55&#x60; – Business Disbursement   * &#x60;C56&#x60; – Government/Non-profit Disbursement   * &#x60;C57&#x60; – Rapid Merchant Settlement   * &#x60;C59&#x60; – Cash-in at Point of Sale   * &#x60;C65&#x60; – General Business-to-Business Transfer 
   */
  public enum TransactionTypeIdentifierEnum {
    C07(String.valueOf("C07")),
    
    C52(String.valueOf("C52")),
    
    C53(String.valueOf("C53")),
    
    C54(String.valueOf("C54")),
    
    C55(String.valueOf("C55")),
    
    C56(String.valueOf("C56")),
    
    C57(String.valueOf("C57")),
    
    C59(String.valueOf("C59")),
    
    C65(String.valueOf("C65"));

    private String value;

    TransactionTypeIdentifierEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionTypeIdentifierEnum fromValue(String value) {
      for (TransactionTypeIdentifierEnum b : TransactionTypeIdentifierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSACTION_TYPE_IDENTIFIER = "transactionTypeIdentifier";
  @javax.annotation.Nullable
  private TransactionTypeIdentifierEnum transactionTypeIdentifier;

  public static final String JSON_PROPERTY_LOCAL_MERCHANT_ID = "localMerchantId";
  @javax.annotation.Nullable
  private String localMerchantId;

  public CardTransactionObject() {
  }

  public CardTransactionObject cardtransactionId(@javax.annotation.Nullable String cardtransactionId) {
    
    this.cardtransactionId = cardtransactionId;
    return this;
  }

  /**
   * The unique identifier of the Card Transaction.
   * @return cardtransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARDTRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardtransactionId() {
    return cardtransactionId;
  }


  @JsonProperty(JSON_PROPERTY_CARDTRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardtransactionId(@javax.annotation.Nullable String cardtransactionId) {
    this.cardtransactionId = cardtransactionId;
  }

  public CardTransactionObject cardId(@javax.annotation.Nullable String cardId) {
    
    this.cardId = cardId;
    return this;
  }

  /**
   * The unique identifier of the card used for the transaction.
   * @return cardId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardId() {
    return cardId;
  }


  @JsonProperty(JSON_PROPERTY_CARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardId(@javax.annotation.Nullable String cardId) {
    this.cardId = cardId;
  }

  public CardTransactionObject walletId(@javax.annotation.Nullable String walletId) {
    
    this.walletId = walletId;
    return this;
  }

  /**
   * The unique identifier of the Wallet the card is attached to.
   * @return walletId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWalletId() {
    return walletId;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletId(@javax.annotation.Nullable String walletId) {
    this.walletId = walletId;
  }

  public CardTransactionObject acquirerId(@javax.annotation.Nullable String acquirerId) {
    
    this.acquirerId = acquirerId;
    return this;
  }

  /**
   * The identifier of the merchant&#39;s bank (acquirer) in the form of 5 to 6 digits.
   * @return acquirerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACQUIRER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcquirerId() {
    return acquirerId;
  }


  @JsonProperty(JSON_PROPERTY_ACQUIRER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquirerId(@javax.annotation.Nullable String acquirerId) {
    this.acquirerId = acquirerId;
  }

  public CardTransactionObject walletCurrency(@javax.annotation.Nullable String walletCurrency) {
    
    this.walletCurrency = walletCurrency;
    return this;
  }

  /**
   * The currency of the Wallet the card is attached to.
   * @return walletCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWalletCurrency() {
    return walletCurrency;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletCurrency(@javax.annotation.Nullable String walletCurrency) {
    this.walletCurrency = walletCurrency;
  }

  public CardTransactionObject merchantId(@javax.annotation.Nullable String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The [Merchant Identifier Number (MID)](/guide/overview/glossary#merchant-identifier-number-mid). 
   * @return merchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantId(@javax.annotation.Nullable String merchantId) {
    this.merchantId = merchantId;
  }

  public CardTransactionObject merchantName(@javax.annotation.Nullable String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

  /**
   * The name of the merchant.
   * @return merchantName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantName() {
    return merchantName;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantName(@javax.annotation.Nullable String merchantName) {
    this.merchantName = merchantName;
  }

  public CardTransactionObject merchantCity(@javax.annotation.Nullable String merchantCity) {
    
    this.merchantCity = merchantCity;
    return this;
  }

  /**
   * The address city of the merchant.
   * @return merchantCity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantCity() {
    return merchantCity;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantCity(@javax.annotation.Nullable String merchantCity) {
    this.merchantCity = merchantCity;
  }

  public CardTransactionObject merchantCountry(@javax.annotation.Nullable String merchantCountry) {
    
    this.merchantCountry = merchantCountry;
    return this;
  }

  /**
   * The address country of the merchant. ISO 3166 3-letter code (except of the US which is a two-letter code) 
   * @return merchantCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantCountry() {
    return merchantCountry;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantCountry(@javax.annotation.Nullable String merchantCountry) {
    this.merchantCountry = merchantCountry;
  }

  public CardTransactionObject mccCode(@javax.annotation.Nullable String mccCode) {
    
    this.mccCode = mccCode;
    return this;
  }

  /**
   * The [Merchant Category Code (MCC)](/guide/overview/glossary#merchant-category-code-mcc). A MCC valued to &#x60;6011&#x60; indicates a withdrawal.  Some MCC are prohibited for [anonymous electronic money](/guide/wallets/introduction#electronic-money-wallet-type-9), such as: money transfer, money order, foreign currency, liquid and cryptocurrency assets, lotteries, on-line gambling, betting, etc. 
   * @return mccCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MCC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMccCode() {
    return mccCode;
  }


  @JsonProperty(JSON_PROPERTY_MCC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMccCode(@javax.annotation.Nullable String mccCode) {
    this.mccCode = mccCode;
  }

  public CardTransactionObject paymentLocalTime(@javax.annotation.Nullable String paymentLocalTime) {
    
    this.paymentLocalTime = paymentLocalTime;
    return this;
  }

  /**
   * The local time at which the transaction occurred.  Format: &#x60;HHmmss&#x60; (24-hour format, e.g., &#x60;235959&#x60; for 23:59:59). 
   * @return paymentLocalTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_LOCAL_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentLocalTime() {
    return paymentLocalTime;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LOCAL_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentLocalTime(@javax.annotation.Nullable String paymentLocalTime) {
    this.paymentLocalTime = paymentLocalTime;
  }

  public CardTransactionObject publicToken(@javax.annotation.Nullable String publicToken) {
    
    this.publicToken = publicToken;
    return this;
  }

  /**
   * The token of the card. This is a way to identify a card without knowing or communicating its [PAN](/guide/overview/glossary#primary-account-number-pan). 
   * @return publicToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicToken() {
    return publicToken;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicToken(@javax.annotation.Nullable String publicToken) {
    this.publicToken = publicToken;
  }

  public CardTransactionObject paymentAmount(@javax.annotation.Nullable Float paymentAmount) {
    
    this.paymentAmount = paymentAmount;
    return this;
  }

  /**
   * The amount of the transaction, always expressed in Euros. See the &#x60;paymentLocalAmount&#x60; for the value in the payment local currency. 
   * @return paymentAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getPaymentAmount() {
    return paymentAmount;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentAmount(@javax.annotation.Nullable Float paymentAmount) {
    this.paymentAmount = paymentAmount;
  }

  public CardTransactionObject paymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * The currency of the payment. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies) 3-digit code. 
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentCurrency() {
    return paymentCurrency;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }

  public CardTransactionObject fees(@javax.annotation.Nullable String fees) {
    
    this.fees = fees;
    return this;
  }

  /**
   * ATM usage or foreign payments fees as defined by Treezor, always set to &#x60;0&#x60;.
   * @return fees
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFees() {
    return fees;
  }


  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFees(@javax.annotation.Nullable String fees) {
    this.fees = fees;
  }

  public CardTransactionObject paymentCountry(@javax.annotation.Nullable String paymentCountry) {
    
    this.paymentCountry = paymentCountry;
    return this;
  }

  /**
   * Country in which the transaction occurred, ISO 3166 3-letter code.
   * @return paymentCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentCountry() {
    return paymentCountry;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentCountry(@javax.annotation.Nullable String paymentCountry) {
    this.paymentCountry = paymentCountry;
  }

  public CardTransactionObject paymentId(@javax.annotation.Nullable String paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The unique identifier of the card payment (or attempted payment), allowing you to follow the card transaction life cycle. 
   * @return paymentId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentId(@javax.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
  }

  public CardTransactionObject paymentStatus(@javax.annotation.Nullable PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * The status of the payment. See the [Statuses](/guide/cards/transactions.html#statuses-paymentstatus) article for more information. 
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentStatus(@javax.annotation.Nullable PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public CardTransactionObject paymentLocalAmount(@javax.annotation.Nullable Float paymentLocalAmount) {
    
    this.paymentLocalAmount = paymentLocalAmount;
    return this;
  }

  /**
   * The amount of the transaction in the local currency.
   * @return paymentLocalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_LOCAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getPaymentLocalAmount() {
    return paymentLocalAmount;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LOCAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentLocalAmount(@javax.annotation.Nullable Float paymentLocalAmount) {
    this.paymentLocalAmount = paymentLocalAmount;
  }

  public CardTransactionObject posCardholderPresence(@javax.annotation.Nullable PosCardholderPresenceEnum posCardholderPresence) {
    
    this.posCardholderPresence = posCardholderPresence;
    return this;
  }

  /**
   * Indicates whether the cardholder was physically present, and if not, how they ordered the card transaction.  See [Cardholder Presence](/guide/cards/transactions.html#cardholder-presence-poscardholderpresence) for more information. 
   * @return posCardholderPresence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POS_CARDHOLDER_PRESENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PosCardholderPresenceEnum getPosCardholderPresence() {
    return posCardholderPresence;
  }


  @JsonProperty(JSON_PROPERTY_POS_CARDHOLDER_PRESENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosCardholderPresence(@javax.annotation.Nullable PosCardholderPresenceEnum posCardholderPresence) {
    this.posCardholderPresence = posCardholderPresence;
  }

  public CardTransactionObject posPostcode(@javax.annotation.Nullable String posPostcode) {
    
    this.posPostcode = posPostcode;
    return this;
  }

  /**
   * Postcode of the point of sale where the transaction occurred.
   * @return posPostcode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POS_POSTCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPosPostcode() {
    return posPostcode;
  }


  @JsonProperty(JSON_PROPERTY_POS_POSTCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosPostcode(@javax.annotation.Nullable String posPostcode) {
    this.posPostcode = posPostcode;
  }

  public CardTransactionObject posCountry(@javax.annotation.Nullable String posCountry) {
    
    this.posCountry = posCountry;
    return this;
  }

  /**
   * Country of the point of sale where the transaction occurred, in ISO 3166 3-digit code format.
   * @return posCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPosCountry() {
    return posCountry;
  }


  @JsonProperty(JSON_PROPERTY_POS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosCountry(@javax.annotation.Nullable String posCountry) {
    this.posCountry = posCountry;
  }

  public CardTransactionObject posTerminalId(@javax.annotation.Nullable String posTerminalId) {
    
    this.posTerminalId = posTerminalId;
    return this;
  }

  /**
   * The identifier of the terminal used for the transaction.
   * @return posTerminalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POS_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPosTerminalId() {
    return posTerminalId;
  }


  @JsonProperty(JSON_PROPERTY_POS_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosTerminalId(@javax.annotation.Nullable String posTerminalId) {
    this.posTerminalId = posTerminalId;
  }

  public CardTransactionObject posCardPresence(@javax.annotation.Nullable PosCardPresenceEnum posCardPresence) {
    
    this.posCardPresence = posCardPresence;
    return this;
  }

  /**
   * Indicates whether the card was physically present during the transaction:  * &#x60;0&#x60; – The card was present * &#x60;1&#x60; – The card was absent * &#x60;9&#x60; – The card presence **cannot be determined 
   * @return posCardPresence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POS_CARD_PRESENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PosCardPresenceEnum getPosCardPresence() {
    return posCardPresence;
  }


  @JsonProperty(JSON_PROPERTY_POS_CARD_PRESENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosCardPresence(@javax.annotation.Nullable PosCardPresenceEnum posCardPresence) {
    this.posCardPresence = posCardPresence;
  }

  public CardTransactionObject panEntryMethod(@javax.annotation.Nullable PanEntryMethodEnum panEntryMethod) {
    
    this.panEntryMethod = panEntryMethod;
    return this;
  }

  /**
   * Indicates how the merchant captured the [PAN](/guide/overview/glossary.html#primary-account-number-pan). See [PAN Entry Method](/guide/cards/transactions.html#pan-entry-method-panentrymethod) for more information. 
   * @return panEntryMethod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAN_ENTRY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PanEntryMethodEnum getPanEntryMethod() {
    return panEntryMethod;
  }


  @JsonProperty(JSON_PROPERTY_PAN_ENTRY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPanEntryMethod(@javax.annotation.Nullable PanEntryMethodEnum panEntryMethod) {
    this.panEntryMethod = panEntryMethod;
  }

  public CardTransactionObject authorizationNote(@javax.annotation.Nullable String authorizationNote) {
    
    this.authorizationNote = authorizationNote;
    return this;
  }

  /**
   * Information regarding the cause of a payment incident and/or status.   See [Authorization Notes](/guide/cards/transactions.html#authorization-note-authorizationnote) for more information and a list of common examples. 
   * @return authorizationNote
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthorizationNote() {
    return authorizationNote;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationNote(@javax.annotation.Nullable String authorizationNote) {
    this.authorizationNote = authorizationNote;
  }

  public CardTransactionObject authorizationResponseCode(@javax.annotation.Nullable String authorizationResponseCode) {
    
    this.authorizationResponseCode = authorizationResponseCode;
    return this;
  }

  /**
   * Response code for a given card transaction, providing additional information regarding as to why a transaction was accepted or refused.  See [Authorization Codes](/guide/cards/transactions.html#codes-authorizationresponsecode) for more information. 
   * @return authorizationResponseCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_RESPONSE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthorizationResponseCode() {
    return authorizationResponseCode;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_RESPONSE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationResponseCode(@javax.annotation.Nullable String authorizationResponseCode) {
    this.authorizationResponseCode = authorizationResponseCode;
  }

  public CardTransactionObject authorizationIssuerId(@javax.annotation.Nullable String authorizationIssuerId) {
    
    this.authorizationIssuerId = authorizationIssuerId;
    return this;
  }

  /**
   * The transaction identifier as generated by the payment processor.
   * @return authorizationIssuerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_ISSUER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthorizationIssuerId() {
    return authorizationIssuerId;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_ISSUER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationIssuerId(@javax.annotation.Nullable String authorizationIssuerId) {
    this.authorizationIssuerId = authorizationIssuerId;
  }

  public CardTransactionObject authorizationIssuerTime(@javax.annotation.Nullable OffsetDateTime authorizationIssuerTime) {
    
    this.authorizationIssuerTime = authorizationIssuerTime;
    return this;
  }

  /**
   * The date and time at which the payment processor authorized the transaction. This value is based on the processor&#39;s timezone (UK).  Format: &#x60;YYYY-MM-DD HH:mm:ss&#x60; 
   * @return authorizationIssuerTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_ISSUER_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getAuthorizationIssuerTime() {
    return authorizationIssuerTime;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_ISSUER_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationIssuerTime(@javax.annotation.Nullable OffsetDateTime authorizationIssuerTime) {
    this.authorizationIssuerTime = authorizationIssuerTime;
  }

  public CardTransactionObject authorizationMti(@javax.annotation.Nullable String authorizationMti) {
    
    this.authorizationMti = authorizationMti;
    return this;
  }

  /**
   * Authorization Message Type Identifier. Please rely on the &#x60;paymentStatus&#x60; value. 
   * @return authorizationMti
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_MTI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthorizationMti() {
    return authorizationMti;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_MTI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationMti(@javax.annotation.Nullable String authorizationMti) {
    this.authorizationMti = authorizationMti;
  }

  public CardTransactionObject authorizedBalance(@javax.annotation.Nullable Float authorizedBalance) {
    
    this.authorizedBalance = authorizedBalance;
    return this;
  }

  /**
   * The [Authorized Balance](/guide/overview/glossary.html#balance) of the wallet after the transaction. 
   * @return authorizedBalance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getAuthorizedBalance() {
    return authorizedBalance;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizedBalance(@javax.annotation.Nullable Float authorizedBalance) {
    this.authorizedBalance = authorizedBalance;
  }

  public CardTransactionObject limitAtmYear(@javax.annotation.Nullable String limitAtmYear) {
    
    this.limitAtmYear = limitAtmYear;
    return this;
  }

  /**
   * The ATM operations limit of the corresponding card for a sliding year.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitAtmYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitAtmYear() {
    return limitAtmYear;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitAtmYear(@javax.annotation.Nullable String limitAtmYear) {
    this.limitAtmYear = limitAtmYear;
  }

  public CardTransactionObject limitAtmMonth(@javax.annotation.Nullable String limitAtmMonth) {
    
    this.limitAtmMonth = limitAtmMonth;
    return this;
  }

  /**
   * ATM operations limit of the corresponding card for a sliding month.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitAtmMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitAtmMonth() {
    return limitAtmMonth;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitAtmMonth(@javax.annotation.Nullable String limitAtmMonth) {
    this.limitAtmMonth = limitAtmMonth;
  }

  public CardTransactionObject limitAtmWeek(@javax.annotation.Nullable String limitAtmWeek) {
    
    this.limitAtmWeek = limitAtmWeek;
    return this;
  }

  /**
   * ATM operations limit of the corresponding card for a sliding week.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitAtmWeek
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitAtmWeek() {
    return limitAtmWeek;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitAtmWeek(@javax.annotation.Nullable String limitAtmWeek) {
    this.limitAtmWeek = limitAtmWeek;
  }

  public CardTransactionObject limitAtmDay(@javax.annotation.Nullable String limitAtmDay) {
    
    this.limitAtmDay = limitAtmDay;
    return this;
  }

  /**
   * ATM operations limit of the corresponding card for a single day.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitAtmDay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitAtmDay() {
    return limitAtmDay;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitAtmDay(@javax.annotation.Nullable String limitAtmDay) {
    this.limitAtmDay = limitAtmDay;
  }

  public CardTransactionObject limitAtmAll(@javax.annotation.Nullable String limitAtmAll) {
    
    this.limitAtmAll = limitAtmAll;
    return this;
  }

  /**
   * ATM operations limit of the corresponding card from beginning.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitAtmAll
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitAtmAll() {
    return limitAtmAll;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_ATM_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitAtmAll(@javax.annotation.Nullable String limitAtmAll) {
    this.limitAtmAll = limitAtmAll;
  }

  public CardTransactionObject limitPaymentYear(@javax.annotation.Nullable String limitPaymentYear) {
    
    this.limitPaymentYear = limitPaymentYear;
    return this;
  }

  /**
   * POS operations limit of the corresponding card for a sliding year.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitPaymentYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitPaymentYear() {
    return limitPaymentYear;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitPaymentYear(@javax.annotation.Nullable String limitPaymentYear) {
    this.limitPaymentYear = limitPaymentYear;
  }

  public CardTransactionObject limitPaymentMonth(@javax.annotation.Nullable String limitPaymentMonth) {
    
    this.limitPaymentMonth = limitPaymentMonth;
    return this;
  }

  /**
   * POS operations limit of the corresponding card for a sliding month.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitPaymentMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitPaymentMonth() {
    return limitPaymentMonth;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitPaymentMonth(@javax.annotation.Nullable String limitPaymentMonth) {
    this.limitPaymentMonth = limitPaymentMonth;
  }

  public CardTransactionObject limitPaymentWeek(@javax.annotation.Nullable String limitPaymentWeek) {
    
    this.limitPaymentWeek = limitPaymentWeek;
    return this;
  }

  /**
   * POS operations limit of the corresponding card for a sliding week.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitPaymentWeek
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitPaymentWeek() {
    return limitPaymentWeek;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitPaymentWeek(@javax.annotation.Nullable String limitPaymentWeek) {
    this.limitPaymentWeek = limitPaymentWeek;
  }

  public CardTransactionObject limitPaymentDay(@javax.annotation.Nullable String limitPaymentDay) {
    
    this.limitPaymentDay = limitPaymentDay;
    return this;
  }

  /**
   * POS operations limit of the corresponding card for a single day.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitPaymentDay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitPaymentDay() {
    return limitPaymentDay;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitPaymentDay(@javax.annotation.Nullable String limitPaymentDay) {
    this.limitPaymentDay = limitPaymentDay;
  }

  public CardTransactionObject limitPaymentAll(@javax.annotation.Nullable String limitPaymentAll) {
    
    this.limitPaymentAll = limitPaymentAll;
    return this;
  }

  /**
   * POS operations limit of the corresponding card from beginning.  See [Payment &amp; Withdrawl limits](/guide/cards/restrictions-limits.html#payment-withdrawal-limits) for more information. 
   * @return limitPaymentAll
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLimitPaymentAll() {
    return limitPaymentAll;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_PAYMENT_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitPaymentAll(@javax.annotation.Nullable String limitPaymentAll) {
    this.limitPaymentAll = limitPaymentAll;
  }

  public CardTransactionObject totalLimitAtmYear(@javax.annotation.Nullable Float totalLimitAtmYear) {
    
    this.totalLimitAtmYear = totalLimitAtmYear;
    return this;
  }

  /**
   * The card yearly withdrawal amount.
   * @return totalLimitAtmYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitAtmYear() {
    return totalLimitAtmYear;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitAtmYear(@javax.annotation.Nullable Float totalLimitAtmYear) {
    this.totalLimitAtmYear = totalLimitAtmYear;
  }

  public CardTransactionObject totalLimitAtmMonth(@javax.annotation.Nullable Float totalLimitAtmMonth) {
    
    this.totalLimitAtmMonth = totalLimitAtmMonth;
    return this;
  }

  /**
   * The card monthly withdrawal amount.
   * @return totalLimitAtmMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitAtmMonth() {
    return totalLimitAtmMonth;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitAtmMonth(@javax.annotation.Nullable Float totalLimitAtmMonth) {
    this.totalLimitAtmMonth = totalLimitAtmMonth;
  }

  public CardTransactionObject totalLimitAtmWeek(@javax.annotation.Nullable Float totalLimitAtmWeek) {
    
    this.totalLimitAtmWeek = totalLimitAtmWeek;
    return this;
  }

  /**
   * The card weekly withdrawal amount.
   * @return totalLimitAtmWeek
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitAtmWeek() {
    return totalLimitAtmWeek;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitAtmWeek(@javax.annotation.Nullable Float totalLimitAtmWeek) {
    this.totalLimitAtmWeek = totalLimitAtmWeek;
  }

  public CardTransactionObject totalLimitAtmDay(@javax.annotation.Nullable Float totalLimitAtmDay) {
    
    this.totalLimitAtmDay = totalLimitAtmDay;
    return this;
  }

  /**
   * The card daily withdrawal amount.
   * @return totalLimitAtmDay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitAtmDay() {
    return totalLimitAtmDay;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitAtmDay(@javax.annotation.Nullable Float totalLimitAtmDay) {
    this.totalLimitAtmDay = totalLimitAtmDay;
  }

  public CardTransactionObject totalLimitAtmAll(@javax.annotation.Nullable Float totalLimitAtmAll) {
    
    this.totalLimitAtmAll = totalLimitAtmAll;
    return this;
  }

  /**
   * The card total withdrawal amount.
   * @return totalLimitAtmAll
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitAtmAll() {
    return totalLimitAtmAll;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_ATM_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitAtmAll(@javax.annotation.Nullable Float totalLimitAtmAll) {
    this.totalLimitAtmAll = totalLimitAtmAll;
  }

  public CardTransactionObject totalLimitPaymentYear(@javax.annotation.Nullable Float totalLimitPaymentYear) {
    
    this.totalLimitPaymentYear = totalLimitPaymentYear;
    return this;
  }

  /**
   * The card yearly spent amount.
   * @return totalLimitPaymentYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitPaymentYear() {
    return totalLimitPaymentYear;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitPaymentYear(@javax.annotation.Nullable Float totalLimitPaymentYear) {
    this.totalLimitPaymentYear = totalLimitPaymentYear;
  }

  public CardTransactionObject totalLimitPaymentMonth(@javax.annotation.Nullable Float totalLimitPaymentMonth) {
    
    this.totalLimitPaymentMonth = totalLimitPaymentMonth;
    return this;
  }

  /**
   * The card monthly spent amount.
   * @return totalLimitPaymentMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitPaymentMonth() {
    return totalLimitPaymentMonth;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitPaymentMonth(@javax.annotation.Nullable Float totalLimitPaymentMonth) {
    this.totalLimitPaymentMonth = totalLimitPaymentMonth;
  }

  public CardTransactionObject totalLimitPaymentWeek(@javax.annotation.Nullable Float totalLimitPaymentWeek) {
    
    this.totalLimitPaymentWeek = totalLimitPaymentWeek;
    return this;
  }

  /**
   * The card weekly spent amount.
   * @return totalLimitPaymentWeek
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitPaymentWeek() {
    return totalLimitPaymentWeek;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitPaymentWeek(@javax.annotation.Nullable Float totalLimitPaymentWeek) {
    this.totalLimitPaymentWeek = totalLimitPaymentWeek;
  }

  public CardTransactionObject totalLimitPaymentDay(@javax.annotation.Nullable Float totalLimitPaymentDay) {
    
    this.totalLimitPaymentDay = totalLimitPaymentDay;
    return this;
  }

  /**
   * The card daily spent amount.
   * @return totalLimitPaymentDay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitPaymentDay() {
    return totalLimitPaymentDay;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitPaymentDay(@javax.annotation.Nullable Float totalLimitPaymentDay) {
    this.totalLimitPaymentDay = totalLimitPaymentDay;
  }

  public CardTransactionObject totalLimitPaymentAll(@javax.annotation.Nullable Float totalLimitPaymentAll) {
    
    this.totalLimitPaymentAll = totalLimitPaymentAll;
    return this;
  }

  /**
   * The card total spent amount.
   * @return totalLimitPaymentAll
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTotalLimitPaymentAll() {
    return totalLimitPaymentAll;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_LIMIT_PAYMENT_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalLimitPaymentAll(@javax.annotation.Nullable Float totalLimitPaymentAll) {
    this.totalLimitPaymentAll = totalLimitPaymentAll;
  }

  public CardTransactionObject cardDigitalizationExternalId(@javax.annotation.Nullable String cardDigitalizationExternalId) {
    
    this.cardDigitalizationExternalId = cardDigitalizationExternalId;
    return this;
  }

  /**
   * The digital payment token identifier (only present if payment was made with a digital token such as Apple Pay or Google Pay for example). 
   * @return cardDigitalizationExternalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_DIGITALIZATION_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardDigitalizationExternalId() {
    return cardDigitalizationExternalId;
  }


  @JsonProperty(JSON_PROPERTY_CARD_DIGITALIZATION_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardDigitalizationExternalId(@javax.annotation.Nullable String cardDigitalizationExternalId) {
    this.cardDigitalizationExternalId = cardDigitalizationExternalId;
  }

  public CardTransactionObject is3DS(@javax.annotation.Nullable Is3DSEnum is3DS) {
    
    this.is3DS = is3DS;
    return this;
  }

  /**
   * Indicates whether [3DSecure](/guide/overview/glossary#_3ds-3d-secure) was used for authentication: * &#x60;0&#x60; – 3DS was not used * &#x60;1&#x60; – 3DS was used 
   * @return is3DS
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS3_D_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Is3DSEnum getIs3DS() {
    return is3DS;
  }


  @JsonProperty(JSON_PROPERTY_IS3_D_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIs3DS(@javax.annotation.Nullable Is3DSEnum is3DS) {
    this.is3DS = is3DS;
  }

  public CardTransactionObject merchantAddress(@javax.annotation.Nullable String merchantAddress) {
    
    this.merchantAddress = merchantAddress;
    return this;
  }

  /**
   * The address of the merchant.
   * @return merchantAddress
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantAddress() {
    return merchantAddress;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantAddress(@javax.annotation.Nullable String merchantAddress) {
    this.merchantAddress = merchantAddress;
  }

  public CardTransactionObject paymentLocalDate(@javax.annotation.Nullable String paymentLocalDate) {
    
    this.paymentLocalDate = paymentLocalDate;
    return this;
  }

  /**
   * The local date on which the transaction occurred.  Format: &#x60;YYYYMMDD&#x60; (e.g., &#x60;20251228&#x60; for December 28, 2025) 
   * @return paymentLocalDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_LOCAL_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentLocalDate() {
    return paymentLocalDate;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LOCAL_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentLocalDate(@javax.annotation.Nullable String paymentLocalDate) {
    this.paymentLocalDate = paymentLocalDate;
  }

  public CardTransactionObject totalRows(@javax.annotation.Nullable Integer totalRows) {
    
    this.totalRows = totalRows;
    return this;
  }

  /**
   * The total numbers of objects matching your search, for pagination purposes. Only valued in the first object of the returned page, &#x60;null&#x60; otherwise. 
   * @return totalRows
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalRows() {
    return totalRows;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalRows(@javax.annotation.Nullable Integer totalRows) {
    this.totalRows = totalRows;
  }

  public CardTransactionObject optimizedMerchantName(@javax.annotation.Nullable String optimizedMerchantName) {
    
    this.optimizedMerchantName = optimizedMerchantName;
    return this;
  }

  /**
   * The name of the merchant, optimized for display and understanding. 
   * @return optimizedMerchantName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIMIZED_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOptimizedMerchantName() {
    return optimizedMerchantName;
  }


  @JsonProperty(JSON_PROPERTY_OPTIMIZED_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptimizedMerchantName(@javax.annotation.Nullable String optimizedMerchantName) {
    this.optimizedMerchantName = optimizedMerchantName;
  }

  public CardTransactionObject merchantLogo(@javax.annotation.Nullable URI merchantLogo) {
    
    this.merchantLogo = merchantLogo;
    return this;
  }

  /**
   * The URL&#39;s of the merchant&#39;s logo.
   * @return merchantLogo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getMerchantLogo() {
    return merchantLogo;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantLogo(@javax.annotation.Nullable URI merchantLogo) {
    this.merchantLogo = merchantLogo;
  }

  public CardTransactionObject merchantCategory(@javax.annotation.Nullable String merchantCategory) {
    
    this.merchantCategory = merchantCategory;
    return this;
  }

  /**
   * The category of the merchant.
   * @return merchantCategory
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantCategory() {
    return merchantCategory;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantCategory(@javax.annotation.Nullable String merchantCategory) {
    this.merchantCategory = merchantCategory;
  }

  public CardTransactionObject transactionSubtype(@javax.annotation.Nullable TransactionSubtypeEnum transactionSubtype) {
    
    this.transactionSubtype = transactionSubtype;
    return this;
  }

  /**
   * Additional information regarding the type of card transaction. Values can be:   * &#x60;OFT&#x60; – Offline transaction   * &#x60;PRE&#x60; – Preauthorization   * &#x60;SEP&#x60; – Second presentment 
   * @return transactionSubtype
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_SUBTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionSubtypeEnum getTransactionSubtype() {
    return transactionSubtype;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_SUBTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionSubtype(@javax.annotation.Nullable TransactionSubtypeEnum transactionSubtype) {
    this.transactionSubtype = transactionSubtype;
  }

  public CardTransactionObject _3dsExemptionType(@javax.annotation.Nullable String _3dsExemptionType) {
    
    this._3dsExemptionType = _3dsExemptionType;
    return this;
  }

  /**
   * Indicates why the transaction was exempted for 3DS authentication. See [3DS Exemption Type](/guide/cards/transactions.html#_3ds-exemption-type-3dsexemptiontype) for the value list. 
   * @return _3dsExemptionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_3DS_EXEMPTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String get3dsExemptionType() {
    return _3dsExemptionType;
  }


  @JsonProperty(JSON_PROPERTY_3DS_EXEMPTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void set3dsExemptionType(@javax.annotation.Nullable String _3dsExemptionType) {
    this._3dsExemptionType = _3dsExemptionType;
  }

  public CardTransactionObject receiverData(@javax.annotation.Nullable String receiverData) {
    
    this.receiverData = receiverData;
    return this;
  }

  /**
   * For MoneySend transactions, information regarding the receiver. It usually includes details such as the receiver&#39;s name, masked pan, and address, separated by digits. 
   * @return receiverData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECEIVER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReceiverData() {
    return receiverData;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReceiverData(@javax.annotation.Nullable String receiverData) {
    this.receiverData = receiverData;
  }

  public CardTransactionObject senderData(@javax.annotation.Nullable String senderData) {
    
    this.senderData = senderData;
    return this;
  }

  /**
   * For MoneySend transactions, information regarding the sender. It usually includes details such as the sender&#39;s name, masked pan, and address, separated by digits. 
   * @return senderData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SENDER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSenderData() {
    return senderData;
  }


  @JsonProperty(JSON_PROPERTY_SENDER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSenderData(@javax.annotation.Nullable String senderData) {
    this.senderData = senderData;
  }

  public CardTransactionObject transactionTypeIdentifier(@javax.annotation.Nullable TransactionTypeIdentifierEnum transactionTypeIdentifier) {
    
    this.transactionTypeIdentifier = transactionTypeIdentifier;
    return this;
  }

  /**
   * For MoneySend transactions, code indicating the type of transaction and the source of funds. Can be:   * &#x60;C07&#x60; – Person-to-Person Transfer   * &#x60;C52&#x60; – General Transfer to Own Account   * &#x60;C53&#x60; – Agent Cash Out   * &#x60;C54&#x60; – Payment of Own Credit Card Bill   * &#x60;C55&#x60; – Business Disbursement   * &#x60;C56&#x60; – Government/Non-profit Disbursement   * &#x60;C57&#x60; – Rapid Merchant Settlement   * &#x60;C59&#x60; – Cash-in at Point of Sale   * &#x60;C65&#x60; – General Business-to-Business Transfer 
   * @return transactionTypeIdentifier
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionTypeIdentifierEnum getTransactionTypeIdentifier() {
    return transactionTypeIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionTypeIdentifier(@javax.annotation.Nullable TransactionTypeIdentifierEnum transactionTypeIdentifier) {
    this.transactionTypeIdentifier = transactionTypeIdentifier;
  }

  public CardTransactionObject localMerchantId(@javax.annotation.Nullable String localMerchantId) {
    
    this.localMerchantId = localMerchantId;
    return this;
  }

  /**
   * Indicates the merchant&#39;s SIREN or SIRET if available.
   * @return localMerchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalMerchantId() {
    return localMerchantId;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalMerchantId(@javax.annotation.Nullable String localMerchantId) {
    this.localMerchantId = localMerchantId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransactionObject cardTransactionObject = (CardTransactionObject) o;
    return Objects.equals(this.cardtransactionId, cardTransactionObject.cardtransactionId) &&
        Objects.equals(this.cardId, cardTransactionObject.cardId) &&
        Objects.equals(this.walletId, cardTransactionObject.walletId) &&
        Objects.equals(this.acquirerId, cardTransactionObject.acquirerId) &&
        Objects.equals(this.walletCurrency, cardTransactionObject.walletCurrency) &&
        Objects.equals(this.merchantId, cardTransactionObject.merchantId) &&
        Objects.equals(this.merchantName, cardTransactionObject.merchantName) &&
        Objects.equals(this.merchantCity, cardTransactionObject.merchantCity) &&
        Objects.equals(this.merchantCountry, cardTransactionObject.merchantCountry) &&
        Objects.equals(this.mccCode, cardTransactionObject.mccCode) &&
        Objects.equals(this.paymentLocalTime, cardTransactionObject.paymentLocalTime) &&
        Objects.equals(this.publicToken, cardTransactionObject.publicToken) &&
        Objects.equals(this.paymentAmount, cardTransactionObject.paymentAmount) &&
        Objects.equals(this.paymentCurrency, cardTransactionObject.paymentCurrency) &&
        Objects.equals(this.fees, cardTransactionObject.fees) &&
        Objects.equals(this.paymentCountry, cardTransactionObject.paymentCountry) &&
        Objects.equals(this.paymentId, cardTransactionObject.paymentId) &&
        Objects.equals(this.paymentStatus, cardTransactionObject.paymentStatus) &&
        Objects.equals(this.paymentLocalAmount, cardTransactionObject.paymentLocalAmount) &&
        Objects.equals(this.posCardholderPresence, cardTransactionObject.posCardholderPresence) &&
        Objects.equals(this.posPostcode, cardTransactionObject.posPostcode) &&
        Objects.equals(this.posCountry, cardTransactionObject.posCountry) &&
        Objects.equals(this.posTerminalId, cardTransactionObject.posTerminalId) &&
        Objects.equals(this.posCardPresence, cardTransactionObject.posCardPresence) &&
        Objects.equals(this.panEntryMethod, cardTransactionObject.panEntryMethod) &&
        Objects.equals(this.authorizationNote, cardTransactionObject.authorizationNote) &&
        Objects.equals(this.authorizationResponseCode, cardTransactionObject.authorizationResponseCode) &&
        Objects.equals(this.authorizationIssuerId, cardTransactionObject.authorizationIssuerId) &&
        Objects.equals(this.authorizationIssuerTime, cardTransactionObject.authorizationIssuerTime) &&
        Objects.equals(this.authorizationMti, cardTransactionObject.authorizationMti) &&
        Objects.equals(this.authorizedBalance, cardTransactionObject.authorizedBalance) &&
        Objects.equals(this.limitAtmYear, cardTransactionObject.limitAtmYear) &&
        Objects.equals(this.limitAtmMonth, cardTransactionObject.limitAtmMonth) &&
        Objects.equals(this.limitAtmWeek, cardTransactionObject.limitAtmWeek) &&
        Objects.equals(this.limitAtmDay, cardTransactionObject.limitAtmDay) &&
        Objects.equals(this.limitAtmAll, cardTransactionObject.limitAtmAll) &&
        Objects.equals(this.limitPaymentYear, cardTransactionObject.limitPaymentYear) &&
        Objects.equals(this.limitPaymentMonth, cardTransactionObject.limitPaymentMonth) &&
        Objects.equals(this.limitPaymentWeek, cardTransactionObject.limitPaymentWeek) &&
        Objects.equals(this.limitPaymentDay, cardTransactionObject.limitPaymentDay) &&
        Objects.equals(this.limitPaymentAll, cardTransactionObject.limitPaymentAll) &&
        Objects.equals(this.totalLimitAtmYear, cardTransactionObject.totalLimitAtmYear) &&
        Objects.equals(this.totalLimitAtmMonth, cardTransactionObject.totalLimitAtmMonth) &&
        Objects.equals(this.totalLimitAtmWeek, cardTransactionObject.totalLimitAtmWeek) &&
        Objects.equals(this.totalLimitAtmDay, cardTransactionObject.totalLimitAtmDay) &&
        Objects.equals(this.totalLimitAtmAll, cardTransactionObject.totalLimitAtmAll) &&
        Objects.equals(this.totalLimitPaymentYear, cardTransactionObject.totalLimitPaymentYear) &&
        Objects.equals(this.totalLimitPaymentMonth, cardTransactionObject.totalLimitPaymentMonth) &&
        Objects.equals(this.totalLimitPaymentWeek, cardTransactionObject.totalLimitPaymentWeek) &&
        Objects.equals(this.totalLimitPaymentDay, cardTransactionObject.totalLimitPaymentDay) &&
        Objects.equals(this.totalLimitPaymentAll, cardTransactionObject.totalLimitPaymentAll) &&
        Objects.equals(this.cardDigitalizationExternalId, cardTransactionObject.cardDigitalizationExternalId) &&
        Objects.equals(this.is3DS, cardTransactionObject.is3DS) &&
        Objects.equals(this.merchantAddress, cardTransactionObject.merchantAddress) &&
        Objects.equals(this.paymentLocalDate, cardTransactionObject.paymentLocalDate) &&
        Objects.equals(this.totalRows, cardTransactionObject.totalRows) &&
        Objects.equals(this.optimizedMerchantName, cardTransactionObject.optimizedMerchantName) &&
        Objects.equals(this.merchantLogo, cardTransactionObject.merchantLogo) &&
        Objects.equals(this.merchantCategory, cardTransactionObject.merchantCategory) &&
        Objects.equals(this.transactionSubtype, cardTransactionObject.transactionSubtype) &&
        Objects.equals(this._3dsExemptionType, cardTransactionObject._3dsExemptionType) &&
        Objects.equals(this.receiverData, cardTransactionObject.receiverData) &&
        Objects.equals(this.senderData, cardTransactionObject.senderData) &&
        Objects.equals(this.transactionTypeIdentifier, cardTransactionObject.transactionTypeIdentifier) &&
        Objects.equals(this.localMerchantId, cardTransactionObject.localMerchantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardtransactionId, cardId, walletId, acquirerId, walletCurrency, merchantId, merchantName, merchantCity, merchantCountry, mccCode, paymentLocalTime, publicToken, paymentAmount, paymentCurrency, fees, paymentCountry, paymentId, paymentStatus, paymentLocalAmount, posCardholderPresence, posPostcode, posCountry, posTerminalId, posCardPresence, panEntryMethod, authorizationNote, authorizationResponseCode, authorizationIssuerId, authorizationIssuerTime, authorizationMti, authorizedBalance, limitAtmYear, limitAtmMonth, limitAtmWeek, limitAtmDay, limitAtmAll, limitPaymentYear, limitPaymentMonth, limitPaymentWeek, limitPaymentDay, limitPaymentAll, totalLimitAtmYear, totalLimitAtmMonth, totalLimitAtmWeek, totalLimitAtmDay, totalLimitAtmAll, totalLimitPaymentYear, totalLimitPaymentMonth, totalLimitPaymentWeek, totalLimitPaymentDay, totalLimitPaymentAll, cardDigitalizationExternalId, is3DS, merchantAddress, paymentLocalDate, totalRows, optimizedMerchantName, merchantLogo, merchantCategory, transactionSubtype, _3dsExemptionType, receiverData, senderData, transactionTypeIdentifier, localMerchantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransactionObject {\n");
    sb.append("    cardtransactionId: ").append(toIndentedString(cardtransactionId)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    acquirerId: ").append(toIndentedString(acquirerId)).append("\n");
    sb.append("    walletCurrency: ").append(toIndentedString(walletCurrency)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantCity: ").append(toIndentedString(merchantCity)).append("\n");
    sb.append("    merchantCountry: ").append(toIndentedString(merchantCountry)).append("\n");
    sb.append("    mccCode: ").append(toIndentedString(mccCode)).append("\n");
    sb.append("    paymentLocalTime: ").append(toIndentedString(paymentLocalTime)).append("\n");
    sb.append("    publicToken: ").append(toIndentedString(publicToken)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    paymentCountry: ").append(toIndentedString(paymentCountry)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    paymentLocalAmount: ").append(toIndentedString(paymentLocalAmount)).append("\n");
    sb.append("    posCardholderPresence: ").append(toIndentedString(posCardholderPresence)).append("\n");
    sb.append("    posPostcode: ").append(toIndentedString(posPostcode)).append("\n");
    sb.append("    posCountry: ").append(toIndentedString(posCountry)).append("\n");
    sb.append("    posTerminalId: ").append(toIndentedString(posTerminalId)).append("\n");
    sb.append("    posCardPresence: ").append(toIndentedString(posCardPresence)).append("\n");
    sb.append("    panEntryMethod: ").append(toIndentedString(panEntryMethod)).append("\n");
    sb.append("    authorizationNote: ").append(toIndentedString(authorizationNote)).append("\n");
    sb.append("    authorizationResponseCode: ").append(toIndentedString(authorizationResponseCode)).append("\n");
    sb.append("    authorizationIssuerId: ").append(toIndentedString(authorizationIssuerId)).append("\n");
    sb.append("    authorizationIssuerTime: ").append(toIndentedString(authorizationIssuerTime)).append("\n");
    sb.append("    authorizationMti: ").append(toIndentedString(authorizationMti)).append("\n");
    sb.append("    authorizedBalance: ").append(toIndentedString(authorizedBalance)).append("\n");
    sb.append("    limitAtmYear: ").append(toIndentedString(limitAtmYear)).append("\n");
    sb.append("    limitAtmMonth: ").append(toIndentedString(limitAtmMonth)).append("\n");
    sb.append("    limitAtmWeek: ").append(toIndentedString(limitAtmWeek)).append("\n");
    sb.append("    limitAtmDay: ").append(toIndentedString(limitAtmDay)).append("\n");
    sb.append("    limitAtmAll: ").append(toIndentedString(limitAtmAll)).append("\n");
    sb.append("    limitPaymentYear: ").append(toIndentedString(limitPaymentYear)).append("\n");
    sb.append("    limitPaymentMonth: ").append(toIndentedString(limitPaymentMonth)).append("\n");
    sb.append("    limitPaymentWeek: ").append(toIndentedString(limitPaymentWeek)).append("\n");
    sb.append("    limitPaymentDay: ").append(toIndentedString(limitPaymentDay)).append("\n");
    sb.append("    limitPaymentAll: ").append(toIndentedString(limitPaymentAll)).append("\n");
    sb.append("    totalLimitAtmYear: ").append(toIndentedString(totalLimitAtmYear)).append("\n");
    sb.append("    totalLimitAtmMonth: ").append(toIndentedString(totalLimitAtmMonth)).append("\n");
    sb.append("    totalLimitAtmWeek: ").append(toIndentedString(totalLimitAtmWeek)).append("\n");
    sb.append("    totalLimitAtmDay: ").append(toIndentedString(totalLimitAtmDay)).append("\n");
    sb.append("    totalLimitAtmAll: ").append(toIndentedString(totalLimitAtmAll)).append("\n");
    sb.append("    totalLimitPaymentYear: ").append(toIndentedString(totalLimitPaymentYear)).append("\n");
    sb.append("    totalLimitPaymentMonth: ").append(toIndentedString(totalLimitPaymentMonth)).append("\n");
    sb.append("    totalLimitPaymentWeek: ").append(toIndentedString(totalLimitPaymentWeek)).append("\n");
    sb.append("    totalLimitPaymentDay: ").append(toIndentedString(totalLimitPaymentDay)).append("\n");
    sb.append("    totalLimitPaymentAll: ").append(toIndentedString(totalLimitPaymentAll)).append("\n");
    sb.append("    cardDigitalizationExternalId: ").append(toIndentedString(cardDigitalizationExternalId)).append("\n");
    sb.append("    is3DS: ").append(toIndentedString(is3DS)).append("\n");
    sb.append("    merchantAddress: ").append(toIndentedString(merchantAddress)).append("\n");
    sb.append("    paymentLocalDate: ").append(toIndentedString(paymentLocalDate)).append("\n");
    sb.append("    totalRows: ").append(toIndentedString(totalRows)).append("\n");
    sb.append("    optimizedMerchantName: ").append(toIndentedString(optimizedMerchantName)).append("\n");
    sb.append("    merchantLogo: ").append(toIndentedString(merchantLogo)).append("\n");
    sb.append("    merchantCategory: ").append(toIndentedString(merchantCategory)).append("\n");
    sb.append("    transactionSubtype: ").append(toIndentedString(transactionSubtype)).append("\n");
    sb.append("    _3dsExemptionType: ").append(toIndentedString(_3dsExemptionType)).append("\n");
    sb.append("    receiverData: ").append(toIndentedString(receiverData)).append("\n");
    sb.append("    senderData: ").append(toIndentedString(senderData)).append("\n");
    sb.append("    transactionTypeIdentifier: ").append(toIndentedString(transactionTypeIdentifier)).append("\n");
    sb.append("    localMerchantId: ").append(toIndentedString(localMerchantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

