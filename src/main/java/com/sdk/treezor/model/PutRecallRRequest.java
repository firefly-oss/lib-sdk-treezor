/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PutRecallRRequest
 */
@JsonPropertyOrder({
  PutRecallRRequest.JSON_PROPERTY_ACCESS_TAG,
  PutRecallRRequest.JSON_PROPERTY_RESPONSE_TYPE,
  PutRecallRRequest.JSON_PROPERTY_NEGATIVE_RESPONSE_REASON_CODE,
  PutRecallRRequest.JSON_PROPERTY_NEGATIVE_RESPONSE_ADDITIONAL_INFORMATION,
  PutRecallRRequest.JSON_PROPERTY_RESPONSE_COMMENT
})
@JsonTypeName("putRecallR_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class PutRecallRRequest {
  public static final String JSON_PROPERTY_ACCESS_TAG = "accessTag";
  @javax.annotation.Nullable
  private String accessTag;

  /**
   * Response to the received recall request. The recall request can be: * &#x60;1&#x60; – Accepted and generates a positive response to the originating bank. * &#x60;0&#x60; – Refused and generates a negative response to the originating bank. 
   */
  public enum ResponseTypeEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    ResponseTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResponseTypeEnum fromValue(Integer value) {
      for (ResponseTypeEnum b : ResponseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESPONSE_TYPE = "responseType";
  @javax.annotation.Nonnull
  private ResponseTypeEnum responseType;

  /**
   * Reason of negative response type. Required if &#x60;responseType&#x60; is false. This field is non case sensitive. 
   */
  public enum NegativeResponseReasonCodeEnum {
    CUST(String.valueOf("CUST")),
    
    LEGL(String.valueOf("LEGL")),
    
    AC04(String.valueOf("AC04")),
    
    NOOR(String.valueOf("NOOR")),
    
    AM04(String.valueOf("AM04")),
    
    NOAS(String.valueOf("NOAS")),
    
    ARDT(String.valueOf("ARDT"));

    private String value;

    NegativeResponseReasonCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NegativeResponseReasonCodeEnum fromValue(String value) {
      for (NegativeResponseReasonCodeEnum b : NegativeResponseReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NEGATIVE_RESPONSE_REASON_CODE = "negativeResponseReasonCode";
  @javax.annotation.Nullable
  private NegativeResponseReasonCodeEnum negativeResponseReasonCode;

  public static final String JSON_PROPERTY_NEGATIVE_RESPONSE_ADDITIONAL_INFORMATION = "negativeResponseAdditionalInformation";
  @javax.annotation.Nullable
  private String negativeResponseAdditionalInformation;

  public static final String JSON_PROPERTY_RESPONSE_COMMENT = "responseComment";
  @javax.annotation.Nullable
  private String responseComment;

  public PutRecallRRequest() {
  }

  public PutRecallRRequest accessTag(@javax.annotation.Nullable String accessTag) {
    
    this.accessTag = accessTag;
    return this;
  }

  /**
   * A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). 
   * @return accessTag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccessTag() {
    return accessTag;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
  }

  public PutRecallRRequest responseType(@javax.annotation.Nonnull ResponseTypeEnum responseType) {
    
    this.responseType = responseType;
    return this;
  }

  /**
   * Response to the received recall request. The recall request can be: * &#x60;1&#x60; – Accepted and generates a positive response to the originating bank. * &#x60;0&#x60; – Refused and generates a negative response to the originating bank. 
   * @return responseType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESPONSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ResponseTypeEnum getResponseType() {
    return responseType;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResponseType(@javax.annotation.Nonnull ResponseTypeEnum responseType) {
    this.responseType = responseType;
  }

  public PutRecallRRequest negativeResponseReasonCode(@javax.annotation.Nullable NegativeResponseReasonCodeEnum negativeResponseReasonCode) {
    
    this.negativeResponseReasonCode = negativeResponseReasonCode;
    return this;
  }

  /**
   * Reason of negative response type. Required if &#x60;responseType&#x60; is false. This field is non case sensitive. 
   * @return negativeResponseReasonCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_RESPONSE_REASON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NegativeResponseReasonCodeEnum getNegativeResponseReasonCode() {
    return negativeResponseReasonCode;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_RESPONSE_REASON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativeResponseReasonCode(@javax.annotation.Nullable NegativeResponseReasonCodeEnum negativeResponseReasonCode) {
    this.negativeResponseReasonCode = negativeResponseReasonCode;
  }

  public PutRecallRRequest negativeResponseAdditionalInformation(@javax.annotation.Nullable String negativeResponseAdditionalInformation) {
    
    this.negativeResponseAdditionalInformation = negativeResponseAdditionalInformation;
    return this;
  }

  /**
   * Free field to add more informations of a negative response type. 
   * @return negativeResponseAdditionalInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_RESPONSE_ADDITIONAL_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegativeResponseAdditionalInformation() {
    return negativeResponseAdditionalInformation;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_RESPONSE_ADDITIONAL_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativeResponseAdditionalInformation(@javax.annotation.Nullable String negativeResponseAdditionalInformation) {
    this.negativeResponseAdditionalInformation = negativeResponseAdditionalInformation;
  }

  public PutRecallRRequest responseComment(@javax.annotation.Nullable String responseComment) {
    
    this.responseComment = responseComment;
    return this;
  }

  /**
   * Free field to add more informations regardless the response type. 
   * @return responseComment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResponseComment() {
    return responseComment;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseComment(@javax.annotation.Nullable String responseComment) {
    this.responseComment = responseComment;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutRecallRRequest putRecallRRequest = (PutRecallRRequest) o;
    return Objects.equals(this.accessTag, putRecallRRequest.accessTag) &&
        Objects.equals(this.responseType, putRecallRRequest.responseType) &&
        Objects.equals(this.negativeResponseReasonCode, putRecallRRequest.negativeResponseReasonCode) &&
        Objects.equals(this.negativeResponseAdditionalInformation, putRecallRRequest.negativeResponseAdditionalInformation) &&
        Objects.equals(this.responseComment, putRecallRRequest.responseComment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTag, responseType, negativeResponseReasonCode, negativeResponseAdditionalInformation, responseComment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutRecallRRequest {\n");
    sb.append("    accessTag: ").append(toIndentedString(accessTag)).append("\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    negativeResponseReasonCode: ").append(toIndentedString(negativeResponseReasonCode)).append("\n");
    sb.append("    negativeResponseAdditionalInformation: ").append(toIndentedString(negativeResponseAdditionalInformation)).append("\n");
    sb.append("    responseComment: ").append(toIndentedString(responseComment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

