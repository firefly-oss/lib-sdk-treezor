/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sdk.treezor.model.PostAuth200ResponseOneOf;
import com.sdk.treezor.model.PostAuth200ResponseOneOf1;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostAuth200Response
 */
@JsonPropertyOrder({
  PostAuth200Response.JSON_PROPERTY_TOKEN_TYPE,
  PostAuth200Response.JSON_PROPERTY_EXPIRES_IN,
  PostAuth200Response.JSON_PROPERTY_ACCESS_TOKEN,
  PostAuth200Response.JSON_PROPERTY_REFRESH_TOKEN
})
@JsonTypeName("postAuth_200_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class PostAuth200Response {
  public static final String JSON_PROPERTY_TOKEN_TYPE = "token_type";
  @javax.annotation.Nullable
  private String tokenType = "Bearer";

  public static final String JSON_PROPERTY_EXPIRES_IN = "expires_in";
  @javax.annotation.Nullable
  private Integer expiresIn = 3600;

  public static final String JSON_PROPERTY_ACCESS_TOKEN = "access_token";
  @javax.annotation.Nullable
  private String accessToken;

  public static final String JSON_PROPERTY_REFRESH_TOKEN = "refresh_token";
  @javax.annotation.Nullable
  private String refreshToken;

  public PostAuth200Response() {
  }

  public PostAuth200Response tokenType(@javax.annotation.Nullable String tokenType) {
    
    this.tokenType = tokenType;
    return this;
  }

  /**
   * This value must be passed in the \&quot;Authorization\&quot; header of your API requests as follows: \&quot;Authorization: Bearer &lt;token&gt;\&quot; (with a space between \&quot;Bearer\&quot; and the token value). 
   * @return tokenType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOKEN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTokenType() {
    return tokenType;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokenType(@javax.annotation.Nullable String tokenType) {
    this.tokenType = tokenType;
  }

  public PostAuth200Response expiresIn(@javax.annotation.Nullable Integer expiresIn) {
    
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExpiresIn() {
    return expiresIn;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresIn(@javax.annotation.Nullable Integer expiresIn) {
    this.expiresIn = expiresIn;
  }

  public PostAuth200Response accessToken(@javax.annotation.Nullable String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

  /**
   * JWT token
   * @return accessToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccessToken() {
    return accessToken;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessToken(@javax.annotation.Nullable String accessToken) {
    this.accessToken = accessToken;
  }

  public PostAuth200Response refreshToken(@javax.annotation.Nullable String refreshToken) {
    
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * A refresh token to regenerate a JWT token without sending all of information request at the first request on password grant. 
   * @return refreshToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRefreshToken() {
    return refreshToken;
  }


  @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefreshToken(@javax.annotation.Nullable String refreshToken) {
    this.refreshToken = refreshToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostAuth200Response postAuth200Response = (PostAuth200Response) o;
    return Objects.equals(this.tokenType, postAuth200Response.tokenType) &&
        Objects.equals(this.expiresIn, postAuth200Response.expiresIn) &&
        Objects.equals(this.accessToken, postAuth200Response.accessToken) &&
        Objects.equals(this.refreshToken, postAuth200Response.refreshToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenType, expiresIn, accessToken, refreshToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostAuth200Response {\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

