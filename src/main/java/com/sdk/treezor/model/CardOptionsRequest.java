/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardOptionsRequest
 */
@JsonPropertyOrder({
  CardOptionsRequest.JSON_PROPERTY_FOREIGN,
  CardOptionsRequest.JSON_PROPERTY_ONLINE,
  CardOptionsRequest.JSON_PROPERTY_ATM,
  CardOptionsRequest.JSON_PROPERTY_NFC,
  CardOptionsRequest.JSON_PROPERTY_ACCESS_TAG
})
@JsonTypeName("cardOptions_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class CardOptionsRequest {
  /**
   * Whether the card is usable abroad. See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   */
  public enum ForeignEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    ForeignEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ForeignEnum fromValue(Integer value) {
      for (ForeignEnum b : ForeignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FOREIGN = "foreign";
  @javax.annotation.Nonnull
  private ForeignEnum foreign;

  /**
   * Whether the card is usable online. See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   */
  public enum OnlineEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    OnlineEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OnlineEnum fromValue(Integer value) {
      for (OnlineEnum b : OnlineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ONLINE = "online";
  @javax.annotation.Nonnull
  private OnlineEnum online;

  /**
   * Whether the card is usable on ATMs (withdrawal). See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   */
  public enum AtmEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    AtmEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AtmEnum fromValue(Integer value) {
      for (AtmEnum b : AtmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATM = "atm";
  @javax.annotation.Nonnull
  private AtmEnum atm;

  /**
   * Whether the card can be used for contactless payments. See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   */
  public enum NfcEnum {
    NUMBER_0(Integer.valueOf(0)),
    
    NUMBER_1(Integer.valueOf(1));

    private Integer value;

    NfcEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NfcEnum fromValue(Integer value) {
      for (NfcEnum b : NfcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NFC = "nfc";
  @javax.annotation.Nonnull
  private NfcEnum nfc;

  public static final String JSON_PROPERTY_ACCESS_TAG = "accessTag";
  @javax.annotation.Nullable
  private String accessTag;

  public CardOptionsRequest() {
  }

  public CardOptionsRequest foreign(@javax.annotation.Nonnull ForeignEnum foreign) {
    
    this.foreign = foreign;
    return this;
  }

  /**
   * Whether the card is usable abroad. See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   * @return foreign
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FOREIGN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ForeignEnum getForeign() {
    return foreign;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForeign(@javax.annotation.Nonnull ForeignEnum foreign) {
    this.foreign = foreign;
  }

  public CardOptionsRequest online(@javax.annotation.Nonnull OnlineEnum online) {
    
    this.online = online;
    return this;
  }

  /**
   * Whether the card is usable online. See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   * @return online
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ONLINE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OnlineEnum getOnline() {
    return online;
  }


  @JsonProperty(JSON_PROPERTY_ONLINE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOnline(@javax.annotation.Nonnull OnlineEnum online) {
    this.online = online;
  }

  public CardOptionsRequest atm(@javax.annotation.Nonnull AtmEnum atm) {
    
    this.atm = atm;
    return this;
  }

  /**
   * Whether the card is usable on ATMs (withdrawal). See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   * @return atm
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AtmEnum getAtm() {
    return atm;
  }


  @JsonProperty(JSON_PROPERTY_ATM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAtm(@javax.annotation.Nonnull AtmEnum atm) {
    this.atm = atm;
  }

  public CardOptionsRequest nfc(@javax.annotation.Nonnull NfcEnum nfc) {
    
    this.nfc = nfc;
    return this;
  }

  /**
   * Whether the card can be used for contactless payments. See [Options &amp; Permission groups](/guide/cards/restrictions-limits.html#options-permission-groups) for more information. 
   * @return nfc
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NFC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NfcEnum getNfc() {
    return nfc;
  }


  @JsonProperty(JSON_PROPERTY_NFC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNfc(@javax.annotation.Nonnull NfcEnum nfc) {
    this.nfc = nfc;
  }

  public CardOptionsRequest accessTag(@javax.annotation.Nullable String accessTag) {
    
    this.accessTag = accessTag;
    return this;
  }

  /**
   * A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). 
   * @return accessTag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccessTag() {
    return accessTag;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardOptionsRequest cardOptionsRequest = (CardOptionsRequest) o;
    return Objects.equals(this.foreign, cardOptionsRequest.foreign) &&
        Objects.equals(this.online, cardOptionsRequest.online) &&
        Objects.equals(this.atm, cardOptionsRequest.atm) &&
        Objects.equals(this.nfc, cardOptionsRequest.nfc) &&
        Objects.equals(this.accessTag, cardOptionsRequest.accessTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foreign, online, atm, nfc, accessTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardOptionsRequest {\n");
    sb.append("    foreign: ").append(toIndentedString(foreign)).append("\n");
    sb.append("    online: ").append(toIndentedString(online)).append("\n");
    sb.append("    atm: ").append(toIndentedString(atm)).append("\n");
    sb.append("    nfc: ").append(toIndentedString(nfc)).append("\n");
    sb.append("    accessTag: ").append(toIndentedString(accessTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

