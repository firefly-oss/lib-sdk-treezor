/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostScaWalletRequest
 */
@JsonPropertyOrder({
  PostScaWalletRequest.JSON_PROPERTY_USER_ID,
  PostScaWalletRequest.JSON_PROPERTY_SCA_WALLET_TAG,
  PostScaWalletRequest.JSON_PROPERTY_AUTH_METHOD
})
@JsonTypeName("postScaWallet_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class PostScaWalletRequest {
  public static final String JSON_PROPERTY_USER_ID = "userId";
  @javax.annotation.Nonnull
  private String userId;

  public static final String JSON_PROPERTY_SCA_WALLET_TAG = "scaWalletTag";
  @javax.annotation.Nullable
  private JsonNullable<String> scaWalletTag = JsonNullable.<String>undefined();

  /**
   * Gets or Sets authMethod
   */
  public enum AuthMethodEnum {
    ID(String.valueOf("ID")),
    
    OTHER(String.valueOf("OTHER")),
    
    OTP_EMAIL(String.valueOf("OTP EMAIL")),
    
    OTP_SMS(String.valueOf("OTP SMS"));

    private String value;

    AuthMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthMethodEnum fromValue(String value) {
      for (AuthMethodEnum b : AuthMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AUTH_METHOD = "authMethod";
  @javax.annotation.Nullable
  private List<AuthMethodEnum> authMethod = new ArrayList<>();

  public PostScaWalletRequest() {
  }

  public PostScaWalletRequest userId(@javax.annotation.Nonnull String userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the User.
   * @return userId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }

  public PostScaWalletRequest scaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = JsonNullable.<String>of(scaWalletTag);
    
    return this;
  }

  /**
   * Get scaWalletTag
   * @return scaWalletTag
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getScaWalletTag() {
        return scaWalletTag.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SCA_WALLET_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getScaWalletTag_JsonNullable() {
    return scaWalletTag;
  }
  
  @JsonProperty(JSON_PROPERTY_SCA_WALLET_TAG)
  public void setScaWalletTag_JsonNullable(JsonNullable<String> scaWalletTag) {
    this.scaWalletTag = scaWalletTag;
  }

  public void setScaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = JsonNullable.<String>of(scaWalletTag);
  }

  public PostScaWalletRequest authMethod(@javax.annotation.Nullable List<AuthMethodEnum> authMethod) {
    
    this.authMethod = authMethod;
    return this;
  }

  public PostScaWalletRequest addAuthMethodItem(AuthMethodEnum authMethodItem) {
    if (this.authMethod == null) {
      this.authMethod = new ArrayList<>();
    }
    this.authMethod.add(authMethodItem);
    return this;
  }

  /**
   * The chosen methods for the 2-factor authentication.
   * @return authMethod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AuthMethodEnum> getAuthMethod() {
    return authMethod;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthMethod(@javax.annotation.Nullable List<AuthMethodEnum> authMethod) {
    this.authMethod = authMethod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostScaWalletRequest postScaWalletRequest = (PostScaWalletRequest) o;
    return Objects.equals(this.userId, postScaWalletRequest.userId) &&
        equalsNullable(this.scaWalletTag, postScaWalletRequest.scaWalletTag) &&
        Objects.equals(this.authMethod, postScaWalletRequest.authMethod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, hashCodeNullable(scaWalletTag), authMethod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostScaWalletRequest {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    scaWalletTag: ").append(toIndentedString(scaWalletTag)).append("\n");
    sb.append("    authMethod: ").append(toIndentedString(authMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

