/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SimulateCardTransactionsRequest
 */
@JsonPropertyOrder({
  SimulateCardTransactionsRequest.JSON_PROPERTY_PUBLIC_TOKEN,
  SimulateCardTransactionsRequest.JSON_PROPERTY_DATE,
  SimulateCardTransactionsRequest.JSON_PROPERTY_AMOUNT,
  SimulateCardTransactionsRequest.JSON_PROPERTY_MCC,
  SimulateCardTransactionsRequest.JSON_PROPERTY_MERCHANT_ID,
  SimulateCardTransactionsRequest.JSON_PROPERTY_MERCHANT_NAME,
  SimulateCardTransactionsRequest.JSON_PROPERTY_PAYMENT_STATUS,
  SimulateCardTransactionsRequest.JSON_PROPERTY_TRANS_LINK,
  SimulateCardTransactionsRequest.JSON_PROPERTY_PAYMENT_CODE
})
@JsonTypeName("simulateCardTransactions_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class SimulateCardTransactionsRequest {
  public static final String JSON_PROPERTY_PUBLIC_TOKEN = "publicToken";
  @javax.annotation.Nullable
  private String publicToken;

  public static final String JSON_PROPERTY_DATE = "date";
  @javax.annotation.Nullable
  private String date;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nullable
  private Float amount;

  public static final String JSON_PROPERTY_MCC = "mcc";
  @javax.annotation.Nullable
  private String mcc;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  @javax.annotation.Nonnull
  private String merchantId;

  public static final String JSON_PROPERTY_MERCHANT_NAME = "merchantName";
  @javax.annotation.Nonnull
  private String merchantName;

  /**
   * The type of CardTransaction. In the specific case of simulation, allowed values are: * &#x60;A&#x60; – Authorization accepted * &#x60;S&#x60; – Settled  See the full list of values in the [Statuses](/guide/cards/transactions.html#statuses-paymentstatus) article. 
   */
  public enum PaymentStatusEnum {
    A(String.valueOf("A")),
    
    S(String.valueOf("S"));

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_STATUS = "paymentStatus";
  @javax.annotation.Nullable
  private PaymentStatusEnum paymentStatus;

  public static final String JSON_PROPERTY_TRANS_LINK = "transLink";
  @javax.annotation.Nonnull
  private String transLink;

  public static final String JSON_PROPERTY_PAYMENT_CODE = "paymentCode";
  @javax.annotation.Nullable
  private String paymentCode;

  public SimulateCardTransactionsRequest() {
  }

  public SimulateCardTransactionsRequest publicToken(@javax.annotation.Nullable String publicToken) {
    
    this.publicToken = publicToken;
    return this;
  }

  /**
   * The public token of the Card.
   * @return publicToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicToken() {
    return publicToken;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicToken(@javax.annotation.Nullable String publicToken) {
    this.publicToken = publicToken;
  }

  public SimulateCardTransactionsRequest date(@javax.annotation.Nullable String date) {
    
    this.date = date;
    return this;
  }

  /**
   * The date and time of the CardTransaction, as seen in the &#x60;authorizationIssuerTime&#x60; attribute.
   * @return date
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(@javax.annotation.Nullable String date) {
    this.date = date;
  }

  public SimulateCardTransactionsRequest amount(@javax.annotation.Nullable Float amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the CardTransaction, as seen it the &#x60;paymentAmount&#x60; and &#x60;paymentLocalAmount&#x60; attributes.
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@javax.annotation.Nullable Float amount) {
    this.amount = amount;
  }

  public SimulateCardTransactionsRequest mcc(@javax.annotation.Nullable String mcc) {
    
    this.mcc = mcc;
    return this;
  }

  /**
   * The Merchant Category Code for the CardTransaction, allowing you to check [Card MCC restrictions](/guide/cards/restrictions-limits.html#mcc-restrictions). 
   * @return mcc
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MCC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMcc() {
    return mcc;
  }


  @JsonProperty(JSON_PROPERTY_MCC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMcc(@javax.annotation.Nullable String mcc) {
    this.mcc = mcc;
  }

  public SimulateCardTransactionsRequest merchantId(@javax.annotation.Nonnull String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The Merchant&#39;s ID for the CardTransaction, allowing you to check [Card MID restrictions](/guide/cards/restrictions-limits.html#mid-restrictions). 
   * @return merchantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantId(@javax.annotation.Nonnull String merchantId) {
    this.merchantId = merchantId;
  }

  public SimulateCardTransactionsRequest merchantName(@javax.annotation.Nonnull String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

  /**
   * The name of the merchant.
   * @return merchantName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantName() {
    return merchantName;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantName(@javax.annotation.Nonnull String merchantName) {
    this.merchantName = merchantName;
  }

  public SimulateCardTransactionsRequest paymentStatus(@javax.annotation.Nullable PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * The type of CardTransaction. In the specific case of simulation, allowed values are: * &#x60;A&#x60; – Authorization accepted * &#x60;S&#x60; – Settled  See the full list of values in the [Statuses](/guide/cards/transactions.html#statuses-paymentstatus) article. 
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentStatus(@javax.annotation.Nullable PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public SimulateCardTransactionsRequest transLink(@javax.annotation.Nonnull String transLink) {
    
    this.transLink = transLink;
    return this;
  }

  /**
   * A unique reference used to associate the Card Transaction with a &#x60;paymentId&#x60;. Must be &#x60;100000000000000&#x60; or higher.  To emulate a complete flow, set a &#x60;paymentStatus &#x3D; A&#x60; followed by a &#x60;S&#x60; while specifying the same &#x60;transLink&#x60; for both requests. 
   * @return transLink
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANS_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransLink() {
    return transLink;
  }


  @JsonProperty(JSON_PROPERTY_TRANS_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransLink(@javax.annotation.Nonnull String transLink) {
    this.transLink = transLink;
  }

  public SimulateCardTransactionsRequest paymentCode(@javax.annotation.Nullable String paymentCode) {
    
    this.paymentCode = paymentCode;
    return this;
  }

  /**
   * Deprecated. Use the &#x60;transLink&#x60; parameter instead.
   * @return paymentCode
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentCode() {
    return paymentCode;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentCode(@javax.annotation.Nullable String paymentCode) {
    this.paymentCode = paymentCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateCardTransactionsRequest simulateCardTransactionsRequest = (SimulateCardTransactionsRequest) o;
    return Objects.equals(this.publicToken, simulateCardTransactionsRequest.publicToken) &&
        Objects.equals(this.date, simulateCardTransactionsRequest.date) &&
        Objects.equals(this.amount, simulateCardTransactionsRequest.amount) &&
        Objects.equals(this.mcc, simulateCardTransactionsRequest.mcc) &&
        Objects.equals(this.merchantId, simulateCardTransactionsRequest.merchantId) &&
        Objects.equals(this.merchantName, simulateCardTransactionsRequest.merchantName) &&
        Objects.equals(this.paymentStatus, simulateCardTransactionsRequest.paymentStatus) &&
        Objects.equals(this.transLink, simulateCardTransactionsRequest.transLink) &&
        Objects.equals(this.paymentCode, simulateCardTransactionsRequest.paymentCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicToken, date, amount, mcc, merchantId, merchantName, paymentStatus, transLink, paymentCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateCardTransactionsRequest {\n");
    sb.append("    publicToken: ").append(toIndentedString(publicToken)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    transLink: ").append(toIndentedString(transLink)).append("\n");
    sb.append("    paymentCode: ").append(toIndentedString(paymentCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

