/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SwapSCAWalletsRequest
 */
@JsonPropertyOrder({
  SwapSCAWalletsRequest.JSON_PROPERTY_REMOVE_SCA_WALLET_ID,
  SwapSCAWalletsRequest.JSON_PROPERTY_SWAP_REASON,
  SwapSCAWalletsRequest.JSON_PROPERTY_AUTH_METHOD,
  SwapSCAWalletsRequest.JSON_PROPERTY_SCA,
  SwapSCAWalletsRequest.JSON_PROPERTY_SCA_WALLET_TAG
})
@JsonTypeName("swapSCAWallets_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class SwapSCAWalletsRequest {
  public static final String JSON_PROPERTY_REMOVE_SCA_WALLET_ID = "removeScaWalletId";
  @javax.annotation.Nonnull
  private String removeScaWalletId;

  /**
   * The reason for swapping SCA Wallet.
   */
  public enum SwapReasonEnum {
    LOST(String.valueOf("LOST")),
    
    OTHER(String.valueOf("OTHER")),
    
    STOLEN(String.valueOf("STOLEN"));

    private String value;

    SwapReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SwapReasonEnum fromValue(String value) {
      for (SwapReasonEnum b : SwapReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SWAP_REASON = "swapReason";
  @javax.annotation.Nonnull
  private SwapReasonEnum swapReason;

  /**
   * Gets or Sets authMethod
   */
  public enum AuthMethodEnum {
    ID(String.valueOf("ID")),
    
    OTHER(String.valueOf("OTHER")),
    
    OTP_SMS(String.valueOf("OTP SMS")),
    
    OTP_EMAIL(String.valueOf("OTP EMAIL"));

    private String value;

    AuthMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthMethodEnum fromValue(String value) {
      for (AuthMethodEnum b : AuthMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AUTH_METHOD = "authMethod";
  @javax.annotation.Nullable
  private List<AuthMethodEnum> authMethod = new ArrayList<>();

  public static final String JSON_PROPERTY_SCA = "sca";
  @javax.annotation.Nullable
  private String sca;

  public static final String JSON_PROPERTY_SCA_WALLET_TAG = "scaWalletTag";
  @javax.annotation.Nullable
  private String scaWalletTag;

  public SwapSCAWalletsRequest() {
  }

  public SwapSCAWalletsRequest removeScaWalletId(@javax.annotation.Nonnull String removeScaWalletId) {
    
    this.removeScaWalletId = removeScaWalletId;
    return this;
  }

  /**
   * The unique identifier of the SCA Wallet to be deleted.
   * @return removeScaWalletId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REMOVE_SCA_WALLET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRemoveScaWalletId() {
    return removeScaWalletId;
  }


  @JsonProperty(JSON_PROPERTY_REMOVE_SCA_WALLET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRemoveScaWalletId(@javax.annotation.Nonnull String removeScaWalletId) {
    this.removeScaWalletId = removeScaWalletId;
  }

  public SwapSCAWalletsRequest swapReason(@javax.annotation.Nonnull SwapReasonEnum swapReason) {
    
    this.swapReason = swapReason;
    return this;
  }

  /**
   * The reason for swapping SCA Wallet.
   * @return swapReason
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SWAP_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SwapReasonEnum getSwapReason() {
    return swapReason;
  }


  @JsonProperty(JSON_PROPERTY_SWAP_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSwapReason(@javax.annotation.Nonnull SwapReasonEnum swapReason) {
    this.swapReason = swapReason;
  }

  public SwapSCAWalletsRequest authMethod(@javax.annotation.Nullable List<AuthMethodEnum> authMethod) {
    
    this.authMethod = authMethod;
    return this;
  }

  public SwapSCAWalletsRequest addAuthMethodItem(AuthMethodEnum authMethodItem) {
    if (this.authMethod == null) {
      this.authMethod = new ArrayList<>();
    }
    this.authMethod.add(authMethodItem);
    return this;
  }

  /**
   * The chosen methods for the 2-factor authentication. Required if no &#x60;scaProof&#x60; is provided. 
   * @return authMethod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AuthMethodEnum> getAuthMethod() {
    return authMethod;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthMethod(@javax.annotation.Nullable List<AuthMethodEnum> authMethod) {
    this.authMethod = authMethod;
  }

  public SwapSCAWalletsRequest sca(@javax.annotation.Nullable String sca) {
    
    this.sca = sca;
    return this;
  }

  /**
   * The valid proof that authenticated the swap. Required if no &#x60;authMethod&#x60; is provided.
   * @return sca
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSca() {
    return sca;
  }


  @JsonProperty(JSON_PROPERTY_SCA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSca(@javax.annotation.Nullable String sca) {
    this.sca = sca;
  }

  public SwapSCAWalletsRequest scaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    
    this.scaWalletTag = scaWalletTag;
    return this;
  }

  /**
   * Custom value for the SCA Wallet. Can be used to name the device for which the new SCA Wallet is created.  
   * @return scaWalletTag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCA_WALLET_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScaWalletTag() {
    return scaWalletTag;
  }


  @JsonProperty(JSON_PROPERTY_SCA_WALLET_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = scaWalletTag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwapSCAWalletsRequest swapSCAWalletsRequest = (SwapSCAWalletsRequest) o;
    return Objects.equals(this.removeScaWalletId, swapSCAWalletsRequest.removeScaWalletId) &&
        Objects.equals(this.swapReason, swapSCAWalletsRequest.swapReason) &&
        Objects.equals(this.authMethod, swapSCAWalletsRequest.authMethod) &&
        Objects.equals(this.sca, swapSCAWalletsRequest.sca) &&
        Objects.equals(this.scaWalletTag, swapSCAWalletsRequest.scaWalletTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(removeScaWalletId, swapReason, authMethod, sca, scaWalletTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwapSCAWalletsRequest {\n");
    sb.append("    removeScaWalletId: ").append(toIndentedString(removeScaWalletId)).append("\n");
    sb.append("    swapReason: ").append(toIndentedString(swapReason)).append("\n");
    sb.append("    authMethod: ").append(toIndentedString(authMethod)).append("\n");
    sb.append("    sca: ").append(toIndentedString(sca)).append("\n");
    sb.append("    scaWalletTag: ").append(toIndentedString(scaWalletTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

