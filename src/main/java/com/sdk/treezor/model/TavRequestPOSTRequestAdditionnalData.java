/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This parameter is required in the case of &#x60;APPLE&#x60; tokenRequestor 
 */
@JsonPropertyOrder({
  TavRequestPOSTRequestAdditionnalData.JSON_PROPERTY_CERTIFICATES,
  TavRequestPOSTRequestAdditionnalData.JSON_PROPERTY_NONCE,
  TavRequestPOSTRequestAdditionnalData.JSON_PROPERTY_NONCE_SIGNATURE
})
@JsonTypeName("tavRequestPOST_request_additionnalData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class TavRequestPOSTRequestAdditionnalData {
  public static final String JSON_PROPERTY_CERTIFICATES = "certificates";
  @javax.annotation.Nullable
  private List<String> certificates = new ArrayList<>();

  public static final String JSON_PROPERTY_NONCE = "nonce";
  @javax.annotation.Nullable
  private String nonce;

  public static final String JSON_PROPERTY_NONCE_SIGNATURE = "nonceSignature";
  @javax.annotation.Nullable
  private byte[] nonceSignature;

  public TavRequestPOSTRequestAdditionnalData() {
  }

  public TavRequestPOSTRequestAdditionnalData certificates(@javax.annotation.Nullable List<String> certificates) {
    
    this.certificates = certificates;
    return this;
  }

  public TavRequestPOSTRequestAdditionnalData addCertificatesItem(String certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

  /**
   * The certificate chain. Required when tokenRequestor is APPLE. The first element of array is the leaf certificate and the last should be the root certificate. There can be 0 or several sub certificates inbetween the first element of array and the last. All certificates are of type string (base64 encoded of DER format) 
   * @return certificates
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCertificates() {
    return certificates;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificates(@javax.annotation.Nullable List<String> certificates) {
    this.certificates = certificates;
  }

  public TavRequestPOSTRequestAdditionnalData nonce(@javax.annotation.Nullable String nonce) {
    
    this.nonce = nonce;
    return this;
  }

  /**
   * The nonce as provided by the Apple SDK. Required when tokenRequestor is &#x60;APPLE&#x60; 
   * @return nonce
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNonce() {
    return nonce;
  }


  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonce(@javax.annotation.Nullable String nonce) {
    this.nonce = nonce;
  }

  public TavRequestPOSTRequestAdditionnalData nonceSignature(@javax.annotation.Nullable byte[] nonceSignature) {
    
    this.nonceSignature = nonceSignature;
    return this;
  }

  /**
   * The nonce signature as provided by the Apple SDK. Required when tokenRequestor is &#x60;APPLE&#x60; 
   * @return nonceSignature
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NONCE_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getNonceSignature() {
    return nonceSignature;
  }


  @JsonProperty(JSON_PROPERTY_NONCE_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonceSignature(@javax.annotation.Nullable byte[] nonceSignature) {
    this.nonceSignature = nonceSignature;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TavRequestPOSTRequestAdditionnalData tavRequestPOSTRequestAdditionnalData = (TavRequestPOSTRequestAdditionnalData) o;
    return Objects.equals(this.certificates, tavRequestPOSTRequestAdditionnalData.certificates) &&
        Objects.equals(this.nonce, tavRequestPOSTRequestAdditionnalData.nonce) &&
        Arrays.equals(this.nonceSignature, tavRequestPOSTRequestAdditionnalData.nonceSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificates, nonce, Arrays.hashCode(nonceSignature));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TavRequestPOSTRequestAdditionnalData {\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    nonceSignature: ").append(toIndentedString(nonceSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

