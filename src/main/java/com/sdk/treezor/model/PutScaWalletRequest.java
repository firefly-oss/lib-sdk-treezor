/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PutScaWalletRequest
 */
@JsonPropertyOrder({
  PutScaWalletRequest.JSON_PROPERTY_LOCK_REASON,
  PutScaWalletRequest.JSON_PROPERTY_LOCK_MESSAGE
})
@JsonTypeName("putScaWallet_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-14T09:49:28.273669400+02:00[Europe/Paris]", comments = "Generator version: 7.12.0")
public class PutScaWalletRequest {
  /**
   * The reason for locking the Wallet.
   */
  public enum LockReasonEnum {
    FRAUDULENT_USE_SUSPECTED_BY_CLIENT(String.valueOf("FRAUDULENT_USE_SUSPECTED_BY_CLIENT")),
    
    FRAUDULENT_USE_SUSPECTED_BY_ISSUER(String.valueOf("FRAUDULENT_USE_SUSPECTED_BY_ISSUER")),
    
    INCIDENT(String.valueOf("INCIDENT")),
    
    ISSUER(String.valueOf("ISSUER")),
    
    LOST_DEVICE(String.valueOf("LOST_DEVICE")),
    
    STOLEN_DEVICE(String.valueOf("STOLEN_DEVICE")),
    
    TERMINATE_SERVICE(String.valueOf("TERMINATE_SERVICE"));

    private String value;

    LockReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LockReasonEnum fromValue(String value) {
      for (LockReasonEnum b : LockReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOCK_REASON = "lockReason";
  @javax.annotation.Nonnull
  private LockReasonEnum lockReason;

  public static final String JSON_PROPERTY_LOCK_MESSAGE = "lockMessage";
  @javax.annotation.Nullable
  private JsonNullable<String> lockMessage = JsonNullable.<String>undefined();

  public PutScaWalletRequest() {
  }

  public PutScaWalletRequest lockReason(@javax.annotation.Nonnull LockReasonEnum lockReason) {
    
    this.lockReason = lockReason;
    return this;
  }

  /**
   * The reason for locking the Wallet.
   * @return lockReason
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCK_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LockReasonEnum getLockReason() {
    return lockReason;
  }


  @JsonProperty(JSON_PROPERTY_LOCK_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLockReason(@javax.annotation.Nonnull LockReasonEnum lockReason) {
    this.lockReason = lockReason;
  }

  public PutScaWalletRequest lockMessage(@javax.annotation.Nullable String lockMessage) {
    this.lockMessage = JsonNullable.<String>of(lockMessage);
    
    return this;
  }

  /**
   * Get lockMessage
   * @return lockMessage
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getLockMessage() {
        return lockMessage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOCK_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLockMessage_JsonNullable() {
    return lockMessage;
  }
  
  @JsonProperty(JSON_PROPERTY_LOCK_MESSAGE)
  public void setLockMessage_JsonNullable(JsonNullable<String> lockMessage) {
    this.lockMessage = lockMessage;
  }

  public void setLockMessage(@javax.annotation.Nullable String lockMessage) {
    this.lockMessage = JsonNullable.<String>of(lockMessage);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutScaWalletRequest putScaWalletRequest = (PutScaWalletRequest) o;
    return Objects.equals(this.lockReason, putScaWalletRequest.lockReason) &&
        equalsNullable(this.lockMessage, putScaWalletRequest.lockMessage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lockReason, hashCodeNullable(lockMessage));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutScaWalletRequest {\n");
    sb.append("    lockReason: ").append(toIndentedString(lockReason)).append("\n");
    sb.append("    lockMessage: ").append(toIndentedString(lockMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

