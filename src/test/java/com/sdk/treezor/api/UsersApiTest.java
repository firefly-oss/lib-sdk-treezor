/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import java.time.OffsetDateTime;
import com.sdk.treezor.model.PostUsersRequest;
import com.sdk.treezor.model.PutUserRequest;
import com.sdk.treezor.model.UserObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Disable User
     *
     * Update the user Status to &#x60;CANCELED&#x60;. See the [Deletion](/guide/users/modifications.html#deletion) article for more information. 
     */
    @Test
    public void deleteUserTest()  {
        // uncomment below to test the function
        //Integer userId = null;
        //String origin = null;
        //String accessTag = null;
        //UserObject response = api.deleteUser(userId, origin, accessTag).block();

        // TODO: test validations
    }
    
    /**
     * Get User
     *
     * Retrieve user&#39;s information for given user&#39;s &#x60;id&#x60;.
     */
    @Test
    public void getUserTest()  {
        // uncomment below to test the function
        //Integer userId = null;
        //String accessTag = null;
        //UserObject response = api.getUser(userId, accessTag).block();

        // TODO: test validations
    }
    
    /**
     * Search Users
     *
     * Retrieve Users matching your search criteria.
     */
    @Test
    public void getUsersTest()  {
        // uncomment below to test the function
        //String accessTag = null;
        //Integer userId = null;
        //Integer userTypeId = null;
        //String userStatus = null;
        //String userTag = null;
        //Integer specifiedUSPerson = null;
        //Integer controllingPersonType = null;
        //Integer employeeType = null;
        //String email = null;
        //String name = null;
        //String legalName = null;
        //String parentUserId = null;
        //Integer pageNumber = null;
        //Integer pageCount = null;
        //String sortBy = null;
        //String sortOrder = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //OffsetDateTime updatedDateFrom = null;
        //OffsetDateTime updatedDateTo = null;
        //UserObject response = api.getUsers(accessTag, userId, userTypeId, userStatus, userTag, specifiedUSPerson, controllingPersonType, employeeType, email, name, legalName, parentUserId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo).block();

        // TODO: test validations
    }
    
    /**
     * Create User
     *
     * You may read [the dedicated documentation for this feature](/guide/users/introduction.html#creation) 
     */
    @Test
    public void postUsersTest()  {
        // uncomment below to test the function
        //PostUsersRequest postUsersRequest = null;
        //UserObject response = api.postUsers(postUsersRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update User
     *
     * Update information regarding the User.  This endpoint may require per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void putUserTest()  {
        // uncomment below to test the function
        //Integer userId = null;
        //PutUserRequest putUserRequest = null;
        //UserObject response = api.putUser(userId, putUserRequest).block();

        // TODO: test validations
    }
    
}
