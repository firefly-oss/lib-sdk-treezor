/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import java.time.OffsetDateTime;
import com.sdk.treezor.model.PostTransfersRequest;
import com.sdk.treezor.model.TransferObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.UUID;

/**
 * API tests for TransfersApi
 */
@Disabled
public class TransfersApiTest {

    private final TransfersApi api = new TransfersApi();

    
    /**
     * Cancel Transfer
     *
     * Change status of the Transfer to &#x60;CANCELED&#x60;.   Only transfers whose stauts is &#x60;PENDING&#x60; can be canceled. 
     */
    @Test
    public void deleteTransferTest()  {
        // uncomment below to test the function
        //UUID transferId = null;
        //TransferObject response = api.deleteTransfer(transferId).block();

        // TODO: test validations
    }
    
    /**
     * Get Transfer
     *
     * Retrieve a transfer using its &#x60;id&#x60;.
     */
    @Test
    public void getTransferTest()  {
        // uncomment below to test the function
        //UUID transferId = null;
        //TransferObject response = api.getTransfer(transferId).block();

        // TODO: test validations
    }
    
    /**
     * Search Transfers
     *
     * Retrieve the list of transfers for at least one of those inputs: &#x60;walletId&#x60;, &#x60;beneficiaryWalletId&#x60;, &#x60;userId&#x60;, &#x60;beneficiaryUserId&#x60;, &#x60;transferId&#x60;, &#x60;transferTag&#x60; 
     */
    @Test
    public void getTransfersTest()  {
        // uncomment below to test the function
        //String accessTag = null;
        //Integer transferId = null;
        //String transferTag = null;
        //String transferStatus = null;
        //Integer walletId = null;
        //Integer beneficiaryWalletId = null;
        //Integer userId = null;
        //Integer beneficiaryUserId = null;
        //String amount = null;
        //String currency = null;
        //Integer transferTypeId = null;
        //Integer pageNumber = null;
        //Integer pageCount = null;
        //String sortBy = null;
        //String sortOrder = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //OffsetDateTime updatedDateFrom = null;
        //OffsetDateTime updatedDateTo = null;
        //TransferObject response = api.getTransfers(accessTag, transferId, transferTag, transferStatus, walletId, beneficiaryWalletId, userId, beneficiaryUserId, amount, currency, transferTypeId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo).block();

        // TODO: test validations
    }
    
    /**
     * Create Transfer
     *
     * Create a new Wallet-to-Wallet transfer.  This endpoint requires per-session or per-operation [SCA](/guide/strong-customer-authentication/introduction.html) on if the &#x60;beneficiaryWalletId&#x60; belongs to the current User or not. 
     */
    @Test
    public void postTransfersTest()  {
        // uncomment below to test the function
        //PostTransfersRequest postTransfersRequest = null;
        //TransferObject response = api.postTransfers(postTransfersRequest).block();

        // TODO: test validations
    }
    
}
