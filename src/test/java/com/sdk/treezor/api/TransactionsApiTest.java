/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.sdk.treezor.model.TransactionObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.UUID;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Get Transaction
     *
     * Retrieve a transaction.
     */
    @Test
    public void getTransactionTest()  {
        // uncomment below to test the function
        //UUID transactionId = null;
        //TransactionObject response = api.getTransaction(transactionId).block();

        // TODO: test validations
    }
    
    /**
     * Search Transactions
     *
     * Retrieve Transactions that match search criteria. The request must contain at least one of the following inputs: &#x60;walletId&#x60;, &#x60;transactionId&#x60;, &#x60;executionDate&#x60;, &#x60;valueDate&#x60; 
     */
    @Test
    public void getTransactionsTest()  {
        // uncomment below to test the function
        //String accessTag = null;
        //Integer transactionId = null;
        //String transactionType = null;
        //Integer transactionTypeId = null;
        //Integer walletId = null;
        //Integer userId = null;
        //String name = null;
        //String description = null;
        //String amount = null;
        //String currency = null;
        //LocalDate valueDate = null;
        //LocalDate executionDate = null;
        //Integer pageNumber = null;
        //Integer pageCount = null;
        //String sortBy = null;
        //String sortOrder = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //TransactionObject response = api.getTransactions(accessTag, transactionId, transactionType, transactionTypeId, walletId, userId, name, description, amount, currency, valueDate, executionDate, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo).block();

        // TODO: test validations
    }
    
}
