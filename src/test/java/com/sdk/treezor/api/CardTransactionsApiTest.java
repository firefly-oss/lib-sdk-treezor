/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import com.sdk.treezor.model.GetCoCardTransactions200Response;
import com.sdk.treezor.model.ReadCardTransaction200Response;
import com.sdk.treezor.model.SimulateCardTransactions201ResponseInner;
import com.sdk.treezor.model.SimulateCardTransactionsRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.UUID;

/**
 * API tests for CardTransactionsApi
 */
@Disabled
public class CardTransactionsApiTest {

    private final CardTransactionsApi api = new CardTransactionsApi();

    
    /**
     * Get Card Transaction
     *
     * Retrieve a Card Transaction based on its &#x60;id&#x60;.
     */
    @Test
    public void getCardtransactionTest()  {
        // uncomment below to test the function
        //UUID cardtransactionId = null;
        //ReadCardTransaction200Response response = api.getCardtransaction(cardtransactionId).block();

        // TODO: test validations
    }
    
    /**
     * Get Card Transactions
     *
     * Retrieve the Card Transactions for a specific card. This request is preferred for a dashboard-oriented usage. You shouldn&#39;t expose this endpoint to your end users.
     */
    @Test
    public void getCoCardTransactionTest()  {
        // uncomment below to test the function
        //String cardId = null;
        //String cursor = null;
        //String createdDateFrom = null;
        //String createdDateTo = null;
        //Float amountFrom = null;
        //Float amountTo = null;
        //List<String> paymentStatus = null;
        //List<String> paymentType = null;
        //String merchantId = null;
        //GetCoCardTransactions200Response response = api.getCoCardTransaction(cardId, cursor, createdDateFrom, createdDateTo, amountFrom, amountTo, paymentStatus, paymentType, merchantId).block();

        // TODO: test validations
    }
    
    /**
     * Get all Card Transactions
     *
     * Retrieve all the Card Transactions. This is the preferred request for a dashboard-oriented approach. You shouldn&#39;t expose this endpoint to your end users.
     */
    @Test
    public void getCoCardTransactionsTest()  {
        // uncomment below to test the function
        //String cursor = null;
        //String createdDateFrom = null;
        //String createdDateTo = null;
        //GetCoCardTransactions200Response response = api.getCoCardTransactions(cursor, createdDateFrom, createdDateTo).block();

        // TODO: test validations
    }
    
    /**
     * Search Card Transactions
     *
     * Retrieve Card Transactions based at least on one of the following intputs: &#x60;cardId&#x60;, &#x60;paymentId&#x60;, &#x60;publicToken&#x60;, &#x60;walletId&#x60;. This is the preferred request for end user-oriented usage. 
     */
    @Test
    public void readCardTransactionTest()  {
        // uncomment below to test the function
        //String accessTag = null;
        //Integer cardtransactionId = null;
        //Integer cardId = null;
        //Integer walletId = null;
        //String merchantId = null;
        //String publicToken = null;
        //Integer paymentId = null;
        //Integer pageNumber = null;
        //Integer pageCount = null;
        //String sortBy = null;
        //ReadCardTransaction200Response response = api.readCardTransaction(accessTag, cardtransactionId, cardId, walletId, merchantId, publicToken, paymentId, pageNumber, pageCount, sortBy).block();

        // TODO: test validations
    }
    
    /**
     * Simulate Card Transactions
     *
     * Simulate Card Transactions in Sandbox environment
     */
    @Test
    public void simulateCardTransactionsTest()  {
        // uncomment below to test the function
        //SimulateCardTransactionsRequest simulateCardTransactionsRequest = null;
        //List<SimulateCardTransactions201ResponseInner> response = api.simulateCardTransactions(simulateCardTransactionsRequest).collectList().block();

        // TODO: test validations
    }
    
}
