/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.sdk.treezor.model.PostVirtualIbanRequest;
import com.sdk.treezor.model.PutVirtualIbanRequest;
import com.sdk.treezor.model.VirtualIbanObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for VirtualIbansApi
 */
@Disabled
public class VirtualIbansApiTest {

    private final VirtualIbansApi api = new VirtualIbansApi();

    
    /**
     * Get Virtual IBAN
     *
     * Retrieve a Virtual IBAN based on its &#x60;id&#x60;.
     */
    @Test
    public void getvirtualibanTest()  {
        // uncomment below to test the function
        //Integer virtualIbanId = null;
        //VirtualIbanObject response = api.getvirtualiban(virtualIbanId).block();

        // TODO: test validations
    }
    
    /**
     * Search Virtual IBANs
     *
     * Retrieve virtual IBANs that match search criteria.
     */
    @Test
    public void getvirtualibansTest()  {
        // uncomment below to test the function
        //String accessTag = null;
        //Integer virtualIbanId = null;
        //Integer walletId = null;
        //Integer typeId = null;
        //Integer tag = null;
        //String reference = null;
        //LocalDate validFrom = null;
        //LocalDate validTo = null;
        //Integer maxUsage = null;
        //Float maxAmount = null;
        //Integer numberOfTransactions = null;
        //Float cumulatedAmount = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //OffsetDateTime updatedDateFrom = null;
        //OffsetDateTime updatedDateTo = null;
        //Integer pageNumber = null;
        //Integer pageCount = null;
        //String sortBy = null;
        //String sortOrder = null;
        //VirtualIbanObject response = api.getvirtualibans(accessTag, virtualIbanId, walletId, typeId, tag, reference, validFrom, validTo, maxUsage, maxAmount, numberOfTransactions, cumulatedAmount, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, pageNumber, pageCount, sortBy, sortOrder).block();

        // TODO: test validations
    }
    
    /**
     * Create Virtual IBAN
     *
     * Create a new virtual IBAN associated with a given Wallet.
     */
    @Test
    public void postVirtualIbanTest()  {
        // uncomment below to test the function
        //PostVirtualIbanRequest postVirtualIbanRequest = null;
        //VirtualIbanObject response = api.postVirtualIban(postVirtualIbanRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update Virtual IBAN
     *
     * Update a Virtual IBAN&#39;s information.
     */
    @Test
    public void putVirtualIbanTest()  {
        // uncomment below to test the function
        //Integer virtualIbanId = null;
        //PutVirtualIbanRequest putVirtualIbanRequest = null;
        //VirtualIbanObject response = api.putVirtualIban(virtualIbanId, putVirtualIbanRequest).block();

        // TODO: test validations
    }
    
}
