/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.ActivateCardRequest;
import com.sdk.treezor.model.AssignCardWalletRequest;
import com.sdk.treezor.model.CardObject;
import com.sdk.treezor.model.CardOptionsRequest;
import com.sdk.treezor.model.ChangePinRequest;
import com.sdk.treezor.model.ConvertVirtualRequest;
import com.sdk.treezor.model.DefaultError;
import com.sdk.treezor.model.GetCardImage200Response;
import com.sdk.treezor.model.GetRenewalDetails200Response;
import java.time.OffsetDateTime;
import com.sdk.treezor.model.Post3dsRequest;
import com.sdk.treezor.model.PostCardPhysicalRequest;
import com.sdk.treezor.model.PostCardVirtualRequest;
import com.sdk.treezor.model.PutCardRequest;
import com.sdk.treezor.model.PutLimitsRequest;
import com.sdk.treezor.model.ReassignCardRequest;
import com.sdk.treezor.model.SetPinRequest;
import com.sdk.treezor.model.UpdateBlockStatusRequest;
import com.sdk.treezor.model.UpdateRenewalDetailsRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.UUID;

/**
 * API tests for CardsApi
 */
@Disabled
public class CardsApiTest {

    private final CardsApi api = new CardsApi();

    
    /**
     * Activate Card
     *
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void activateCardTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //ActivateCardRequest activateCardRequest = null;
        //CardObject response = api.activateCard(cardId, activateCardRequest).block();

        // TODO: test validations
    }
    
    /**
     * Activate Card Public Token
     *
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). Ideal for end user oriented action. A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void activateCardTokenTest()  {
        // uncomment below to test the function
        //String cardToken = null;
        //CardObject response = api.activateCardToken(cardToken).block();

        // TODO: test validations
    }
    
    /**
     * Assign Wallet
     *
     * Assign the Card to another Wallet. 
     */
    @Test
    public void assignCardWalletTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //AssignCardWalletRequest assignCardWalletRequest = null;
        //CardObject response = api.assignCardWallet(cardId, assignCardWalletRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update Card Options
     *
     * Modify the Card permissions group.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void cardOptionsTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //CardOptionsRequest cardOptionsRequest = null;
        //CardObject response = api.cardOptions(cardId, cardOptionsRequest).block();

        // TODO: test validations
    }
    
    /**
     * Change Card PIN
     *
     * Change the Card PIN code knowing the current one.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void changePinTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //ChangePinRequest changePinRequest = null;
        //CardObject response = api.changePin(cardId, changePinRequest).block();

        // TODO: test validations
    }
    
    /**
     * Convert virtual card to physical
     *
     * Convert a virtual Card into a physical one. The converted card will be both virtual and physical. 
     */
    @Test
    public void convertVirtualTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //ConvertVirtualRequest convertVirtualRequest = null;
        //CardObject response = api.convertVirtual(cardId, convertVirtualRequest).block();

        // TODO: test validations
    }
    
    /**
     * Get Card
     *
     * Retrieve a Card based on its &#x60;id&#x60;.
     */
    @Test
    public void getCardTest()  {
        // uncomment below to test the function
        //UUID cardId = null;
        //CardObject response = api.getCard(cardId).block();

        // TODO: test validations
    }
    
    /**
     * Get Card Image
     *
     * Retrieve a virtual card image.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void getCardImageTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //String accessTag = null;
        //GetCardImage200Response response = api.getCardImage(cardId, accessTag).block();

        // TODO: test validations
    }
    
    /**
     * Search Cards
     *
     * Retrieve Cards based on search criteria.
     */
    @Test
    public void getCardsTest()  {
        // uncomment below to test the function
        //String accessTag = null;
        //Integer cardId = null;
        //Integer userId = null;
        //String embossedName = null;
        //String publicToken = null;
        //String permsGroup = null;
        //Integer isPhysical = null;
        //Integer isConverted = null;
        //Integer lockStatus = null;
        //Integer mccRestrictionGroupId = null;
        //Integer merchantRestrictionGroupId = null;
        //Integer countryRestrictionGroupId = null;
        //Integer pageNumber = null;
        //Integer pageCount = null;
        //String sortBy = null;
        //String sortOrder = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //OffsetDateTime updatedDateFrom = null;
        //OffsetDateTime updatedDateTo = null;
        //CardObject response = api.getCards(accessTag, cardId, userId, embossedName, publicToken, permsGroup, isPhysical, isConverted, lockStatus, mccRestrictionGroupId, merchantRestrictionGroupId, countryRestrictionGroupId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo).block();

        // TODO: test validations
    }
    
    /**
     * Get Renewal Details
     *
     * Retrieve the Card &#x60;renewalType&#x60;. 
     */
    @Test
    public void getRenewalDetailsTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //GetRenewalDetails200Response response = api.getRenewalDetails(cardId).block();

        // TODO: test validations
    }
    
    /**
     * Register 3D secure
     *
     * Register a card to 3D secure service. The user&#39;s mobile number must begin with &#x60;+&#x60;, or &#x60;00&#x60;, and the country dialing code. 
     */
    @Test
    public void post3dsTest()  {
        // uncomment below to test the function
        //Post3dsRequest post3dsRequest = null;
        //CardObject response = api.post3ds(post3dsRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create Physical Card
     *
     * Create a new physical card. To use a card, it must be activated (&#x60;/cards/{id}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void postCardPhysicalTest()  {
        // uncomment below to test the function
        //PostCardPhysicalRequest postCardPhysicalRequest = null;
        //CardObject response = api.postCardPhysical(postCardPhysicalRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create Virtual Card
     *
     * Create a new virtual card. To use a card, it must be activated (&#x60;/v1/cards/{cardId}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void postCardVirtualTest()  {
        // uncomment below to test the function
        //PostCardVirtualRequest postCardVirtualRequest = null;
        //CardObject response = api.postCardVirtual(postCardVirtualRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update Card
     *
     * Update the restriction groups of the card, as well as the &#x60;cardTag&#x60;. 
     */
    @Test
    public void putCardTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //PutCardRequest putCardRequest = null;
        //CardObject response = api.putCard(cardId, putCardRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update Card Limits
     *
     * Modify the Card limits.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void putLimitsTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //PutLimitsRequest putLimitsRequest = null;
        //CardObject response = api.putLimits(cardId, putLimitsRequest).block();

        // TODO: test validations
    }
    
    /**
     * Renew Card
     *
     * Renew a Card manually. 
     */
    @Test
    public void putRenewTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //CardObject response = api.putRenew(cardId).block();

        // TODO: test validations
    }
    
    /**
     * Reassign Card
     *
     * Assign the Card to another User or Wallet. 
     */
    @Test
    public void reassignCardTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //ReassignCardRequest reassignCardRequest = null;
        //CardObject response = api.reassignCard(cardId, reassignCardRequest).block();

        // TODO: test validations
    }
    
    /**
     * Regenerate Card
     *
     * Recreate the card image if the card is unlocked.   Useful when changing card design, company name, or when retrieving the image results in a 404. 
     */
    @Test
    public void regenerateCardTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //ConvertVirtualRequest convertVirtualRequest = null;
        //CardObject response = api.regenerateCard(cardId, convertVirtualRequest).block();

        // TODO: test validations
    }
    
    /**
     * Set Card PIN
     *
     * Overwrite the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void setPinTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //SetPinRequest setPinRequest = null;
        //CardObject response = api.setPin(cardId, setPinRequest).block();

        // TODO: test validations
    }
    
    /**
     * Unblock Card CVC2
     *
     * Unblock a Card whose CVC2 is locked.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void unblockCvcTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //api.unblockCvc(cardId).block();

        // TODO: test validations
    }
    
    /**
     * Unblock Card PIN
     *
     * Unblock the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void unblockPinTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //ConvertVirtualRequest convertVirtualRequest = null;
        //CardObject response = api.unblockPin(cardId, convertVirtualRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update Card Lock Status
     *
     * Block or unblock a card.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     */
    @Test
    public void updateBlockStatusTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //UpdateBlockStatusRequest updateBlockStatusRequest = null;
        //CardObject response = api.updateBlockStatus(cardId, updateBlockStatusRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update Renewal Details
     *
     * Update the Card &#x60;renewalType&#x60;. 
     */
    @Test
    public void updateRenewalDetailsTest()  {
        // uncomment below to test the function
        //Integer cardId = null;
        //UpdateRenewalDetailsRequest updateRenewalDetailsRequest = null;
        //GetRenewalDetails200Response response = api.updateRenewalDetails(cardId, updateRenewalDetailsRequest).block();

        // TODO: test validations
    }
    
}
