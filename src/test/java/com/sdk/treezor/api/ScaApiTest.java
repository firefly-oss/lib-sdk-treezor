/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import com.sdk.treezor.model.GetSCAWalletsDefaultResponseInner;
import com.sdk.treezor.model.PostScaWalletRequest;
import com.sdk.treezor.model.PutScaWalletRequest;
import com.sdk.treezor.model.ScaWalletObject;
import com.sdk.treezor.model.SetPasscodeRequest;
import com.sdk.treezor.model.SwapSCAWalletsRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for ScaApi
 */
@Disabled
public class ScaApiTest {

    private final ScaApi api = new ScaApi();

    
    /**
     * Delete SCA Wallet
     *
     * Permanently delete an SCA Wallet.
     */
    @Test
    public void deleteScaWalletTest()  {
        // uncomment below to test the function
        //String scaWalletId = null;
        //ScaWalletObject response = api.deleteScaWallet(scaWalletId).block();

        // TODO: test validations
    }
    
    /**
     * Search SCA Wallets
     *
     * Retrieve the list of [SCA Wallets](/guide/strong-customer-authentication/introduction.html#sca-wallet-object) for a given user.
     */
    @Test
    public void getSCAWalletsTest()  {
        // uncomment below to test the function
        //String userId = null;
        //String cursor = null;
        //ScaWalletObject response = api.getSCAWallets(userId, cursor).block();

        // TODO: test validations
    }
    
    /**
     * Get SCA Wallet
     *
     * Retrieve an SCA Wallet by providing its &#x60;id&#x60;.
     */
    @Test
    public void getScaWalletTest()  {
        // uncomment below to test the function
        //String scaWalletId = null;
        //ScaWalletObject response = api.getScaWallet(scaWalletId).block();

        // TODO: test validations
    }
    
    /**
     * Create SCA Wallet
     *
     * Create a new [SCA Wallet](/guide/strong-customer-authentication/introduction.html#sca-wallet-object) manually.
     */
    @Test
    public void postScaWalletTest()  {
        // uncomment below to test the function
        //PostScaWalletRequest postScaWalletRequest = null;
        //ScaWalletObject response = api.postScaWallet(postScaWalletRequest).block();

        // TODO: test validations
    }
    
    /**
     * Lock SCA Wallet
     *
     * Locks an SCA Wallet so that none of the services it offers can be unlocked until it is unlocked. 
     */
    @Test
    public void putScaWalletTest()  {
        // uncomment below to test the function
        //String scaWalletId = null;
        //PutScaWalletRequest putScaWalletRequest = null;
        //ScaWalletObject response = api.putScaWallet(scaWalletId, putScaWalletRequest).block();

        // TODO: test validations
    }
    
    /**
     * Reset PIN
     *
     * Reset the PIN code of an SCA Wallet if the user has locked their Wallet after too many consecutive wrong PIN attempts. See [Reset PIN (Mobile)](/guide/strong-customer-authentication/sca-wallet-lifecycle.html#reset-pin-mobile) for more information.  Once the PIN reset, the Customer can set a new PIN via the mobile application. 
     */
    @Test
    public void resetScaWalletPinTest()  {
        // uncomment below to test the function
        //String scaWalletId = null;
        //ScaWalletObject response = api.resetScaWalletPin(scaWalletId).block();

        // TODO: test validations
    }
    
    /**
     * Change Passcode
     *
     * Change the passcode ([Web Native SCA](/guide/strong-customer-authentication/introduction.html#web-native)). 
     */
    @Test
    public void setPasscodeTest()  {
        // uncomment below to test the function
        //SetPasscodeRequest setPasscodeRequest = null;
        //api.setPasscode(setPasscodeRequest).block();

        // TODO: test validations
    }
    
    /**
     * Swap SCA Wallets
     *
     * Create an SCA Wallet while deleting the previous one as users should have only one device enrolled.
     */
    @Test
    public void swapSCAWalletsTest()  {
        // uncomment below to test the function
        //SwapSCAWalletsRequest swapSCAWalletsRequest = null;
        //ScaWalletObject response = api.swapSCAWallets(swapSCAWalletsRequest).block();

        // TODO: test validations
    }
    
    /**
     * Unlock SCA Wallet
     *
     * Unlock an SCA Wallet.
     */
    @Test
    public void unlockScaWalletTest()  {
        // uncomment below to test the function
        //String scaWalletId = null;
        //ScaWalletObject response = api.unlockScaWallet(scaWalletId).block();

        // TODO: test validations
    }
    
}
