/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.AcquiringPayin;
import com.sdk.treezor.model.Authorization;
import com.sdk.treezor.model.AuthorizationDeleteResponse;
import com.sdk.treezor.model.AuthorizationRequest;
import com.sdk.treezor.model.CaptureResponse;
import com.sdk.treezor.model.ChargebacksResponse;
import com.sdk.treezor.model.DefaultError;
import com.sdk.treezor.model.PostAcqAuthPayinRequest;
import com.sdk.treezor.model.RefundRequest;
import com.sdk.treezor.model.RefundsResponse;
import com.sdk.treezor.model.TopupCardRequest;
import com.sdk.treezor.model.TopupCards;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for AcquiringCardTopupsApi
 */
@Disabled
public class AcquiringCardTopupsApiTest {

    private final AcquiringCardTopupsApi api = new AcquiringCardTopupsApi();

    
    /**
     * Get Chargeback
     *
     * Retrieve a card acquiring a chargeback from the system.
     */
    @Test
    public void acquiringv2TopupCardsChargebacksGetTest()  {
        // uncomment below to test the function
        //UUID chargebackUuid = null;
        //ChargebacksResponse response = api.acquiringv2TopupCardsChargebacksGet(chargebackUuid).block();

        // TODO: test validations
    }
    
    /**
     * Get Refund
     *
     * Retrieve a card acquring refund from the system.
     */
    @Test
    public void acquiringv2TopupCardsRefundsGetTest()  {
        // uncomment below to test the function
        //UUID refundUuid = null;
        //RefundsResponse response = api.acquiringv2TopupCardsRefundsGet(refundUuid).block();

        // TODO: test validations
    }
    
    /**
     * Create Refund
     *
     * Create a new card topup refund.
     */
    @Test
    public void acquiringv2TopupCardsRefundsPostTest()  {
        // uncomment below to test the function
        //RefundRequest refundRequest = null;
        //RefundsResponse response = api.acquiringv2TopupCardsRefundsPost(refundRequest).block();

        // TODO: test validations
    }
    
    /**
     * Delete Authorization
     *
     * Delete an authorization from the system
     */
    @Test
    public void deleteAcqAuthTest()  {
        // uncomment below to test the function
        //UUID authorizationUuid = null;
        //AuthorizationDeleteResponse response = api.deleteAcqAuth(authorizationUuid).block();

        // TODO: test validations
    }
    
    /**
     * Cancel Topup Card
     *
     * Change topup card status to CANCELED.
     */
    @Test
    public void deleteTopupCardTest()  {
        // uncomment below to test the function
        //String userId = null;
        //String topupCardId = null;
        //TopupCards response = api.deleteTopupCard(userId, topupCardId).block();

        // TODO: test validations
    }
    
    /**
     * Get Authorization
     *
     * Retrieve an authorization from the system.
     */
    @Test
    public void getAcqAuthTest()  {
        // uncomment below to test the function
        //UUID authorizationUuid = null;
        //Authorization response = api.getAcqAuth(authorizationUuid).block();

        // TODO: test validations
    }
    
    /**
     * Get Authorization Payins
     *
     * List payins created from a given authorization.
     */
    @Test
    public void getAcqAuthPayinsTest()  {
        // uncomment below to test the function
        //String authorizationUuid = null;
        //String exclusiveStartKey = null;
        //List<AcquiringPayin> response = api.getAcqAuthPayins(authorizationUuid, exclusiveStartKey).collectList().block();

        // TODO: test validations
    }
    
    /**
     * Get Topup Card
     *
     * Retrieve the details of a Topup Card.
     */
    @Test
    public void getTopupCardTest()  {
        // uncomment below to test the function
        //String userId = null;
        //String topupCardId = null;
        //TopupCards response = api.getTopupCard(userId, topupCardId).block();

        // TODO: test validations
    }
    
    /**
     * Search Topup Cards
     *
     * Get topup cards.
     */
    @Test
    public void getTopupCardsTest()  {
        // uncomment below to test the function
        //String userId = null;
        //TopupCards response = api.getTopupCards(userId).block();

        // TODO: test validations
    }
    
    /**
     * Create Authorization
     *
     * Create an authorization to make a card topup payin within 7 days. The card must be [tokenized](/guide/acquiring/card-tokenization.html) first. 
     */
    @Test
    public void postAcqAuthTest()  {
        // uncomment below to test the function
        //AuthorizationRequest authorizationRequest = null;
        //Authorization response = api.postAcqAuth(authorizationRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create Payin from Authorization
     *
     * Create a payin from an authorization. The amount must be â‰¤ to the authorization amount. [Learn more](/guide/acquiring/preauthorized.html#advanced-capture).
     */
    @Test
    public void postAcqAuthPayinTest()  {
        // uncomment below to test the function
        //UUID authorizationUuid = null;
        //PostAcqAuthPayinRequest postAcqAuthPayinRequest = null;
        //CaptureResponse response = api.postAcqAuthPayin(authorizationUuid, postAcqAuthPayinRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create Topup Card
     *
     * Create a new topup card. The card must have been previously tokenized. 
     */
    @Test
    public void postTopupCardTest()  {
        // uncomment below to test the function
        //String userId = null;
        //TopupCardRequest topupCardRequest = null;
        //TopupCards response = api.postTopupCard(userId, topupCardRequest).block();

        // TODO: test validations
    }
    
}
