/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.DefaultError;
import com.sdk.treezor.model.GetOperations200Response;
import com.sdk.treezor.model.GetOperationsReport200Response;
import com.sdk.treezor.model.PostOperationsReportRequest;
import com.sdk.treezor.model.SimulateOperationsRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for OperationsApi
 */
@Disabled
public class OperationsApiTest {

    private final OperationsApi api = new OperationsApi();

    
    /**
     * Search Operations
     *
     * Retrieve Operations that match your search conditions. The request must specify at least: &#x60;walletId&#x60;, &#x60;dateTo&#x60;, &#x60;dateFrom&#x60;.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html) for operations that are more than 90 days old. 
     */
    @Test
    public void getOperationsTest()  {
        // uncomment below to test the function
        //Long cardId = null;
        //Long walletId = null;
        //String dateFrom = null;
        //String dateTo = null;
        //Long pageSize = null;
        //String operationType = null;
        //String cursor = null;
        //List<String> initialFlow = null;
        //String direction = null;
        //Integer amountFrom = null;
        //String amountTo = null;
        //List<String> status = null;
        //GetOperations200Response response = api.getOperations(cardId, walletId, dateFrom, dateTo, pageSize, operationType, cursor, initialFlow, direction, amountFrom, amountTo, status).block();

        // TODO: test validations
    }
    
    /**
     * Get Operations Report
     *
     * Retrieve an Operations Report based on the corresponding Wallet &#x60;id&#x60;.
     */
    @Test
    public void getOperationsReportTest()  {
        // uncomment below to test the function
        //Integer walletId = null;
        //String dateFrom = null;
        //String dateTo = null;
        //GetOperationsReport200Response response = api.getOperationsReport(walletId, dateFrom, dateTo).block();

        // TODO: test validations
    }
    
    /**
     * Create Operations Report
     *
     * Create a CSV export that includes all operations for a given Wallet on a given period.
     */
    @Test
    public void postOperationsReportTest()  {
        // uncomment below to test the function
        //Integer walletId = null;
        //PostOperationsReportRequest postOperationsReportRequest = null;
        //api.postOperationsReport(walletId, postOperationsReportRequest).block();

        // TODO: test validations
    }
    
    /**
     * Simulate Operations
     *
     * Create fake operations for a given Wallet. This may prove useful to test [Account Statements](/guide/wallets/account-statements.html) for instance. 
     */
    @Test
    public void simulateOperationsTest()  {
        // uncomment below to test the function
        //SimulateOperationsRequest simulateOperationsRequest = null;
        //api.simulateOperations(simulateOperationsRequest).block();

        // TODO: test validations
    }
    
}
