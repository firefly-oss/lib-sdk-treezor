/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.api;

import com.sdk.treezor.model.CreateSupportUserRequest;
import com.sdk.treezor.model.DefaultError;
import com.sdk.treezor.model.SupportUserObject;
import com.sdk.treezor.model.UpdateSupportUserRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for SupportUsersApi
 */
@Disabled
public class SupportUsersApiTest {

    private final SupportUsersApi api = new SupportUsersApi();

    
    /**
     * Create Support User
     *
     * Create a new Support User.
     */
    @Test
    public void createSupportUserTest()  {
        // uncomment below to test the function
        //CreateSupportUserRequest createSupportUserRequest = null;
        //SupportUserObject response = api.createSupportUser(createSupportUserRequest).block();

        // TODO: test validations
    }
    
    /**
     * Delete Support User
     *
     * Delete a Support User
     */
    @Test
    public void deleteSupportUserTest()  {
        // uncomment below to test the function
        //String supportUserId = null;
        //api.deleteSupportUser(supportUserId).block();

        // TODO: test validations
    }
    
    /**
     * Get Support User
     *
     * Retrieve a Support User based on its &#x60;id&#x60;.
     */
    @Test
    public void findOneSupportUserByIdTest()  {
        // uncomment below to test the function
        //String supportUserId = null;
        //SupportUserObject response = api.findOneSupportUserById(supportUserId).block();

        // TODO: test validations
    }
    
    /**
     * Get all Support Users
     *
     * Retrieve all the Support Users.
     */
    @Test
    public void getAllSupportUserTest()  {
        // uncomment below to test the function
        //List<SupportUserObject> response = api.getAllSupportUser().collectList().block();

        // TODO: test validations
    }
    
    /**
     * Unblock Support User
     *
     * Unblock a Support User. Support Users may be blocked if they failed to login 3 times in a row.
     */
    @Test
    public void unblockSupportUserTest()  {
        // uncomment below to test the function
        //String supportUserId = null;
        //api.unblockSupportUser(supportUserId).block();

        // TODO: test validations
    }
    
    /**
     * Update Support User
     *
     * Modify a Support User information.
     */
    @Test
    public void updateSupportUserTest()  {
        // uncomment below to test the function
        //String supportUserId = null;
        //UpdateSupportUserRequest updateSupportUserRequest = null;
        //SupportUserObject response = api.updateSupportUser(supportUserId, updateSupportUserRequest).block();

        // TODO: test validations
    }
    
}
