/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sdk.treezor.model.BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BeneficiaryObjectBeneficiariesInner
 */
class BeneficiaryObjectBeneficiariesInnerTest {
    private final BeneficiaryObjectBeneficiariesInner model = new BeneficiaryObjectBeneficiariesInner();

    /**
     * Model tests for BeneficiaryObjectBeneficiariesInner
     */
    @Test
    void testBeneficiaryObjectBeneficiariesInner() {
        // TODO: test BeneficiaryObjectBeneficiariesInner
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'tag'
     */
    @Test
    void tagTest() {
        // TODO: test tag
    }

    /**
     * Test the property 'userId'
     */
    @Test
    void userIdTest() {
        // TODO: test userId
    }

    /**
     * Test the property 'nickName'
     */
    @Test
    void nickNameTest() {
        // TODO: test nickName
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'address'
     */
    @Test
    void addressTest() {
        // TODO: test address
    }

    /**
     * Test the property 'iban'
     */
    @Test
    void ibanTest() {
        // TODO: test iban
    }

    /**
     * Test the property 'bic'
     */
    @Test
    void bicTest() {
        // TODO: test bic
    }

    /**
     * Test the property 'sepaCreditorIdentifier'
     */
    @Test
    void sepaCreditorIdentifierTest() {
        // TODO: test sepaCreditorIdentifier
    }

    /**
     * Test the property 'sddB2bWhitelist'
     */
    @Test
    void sddB2bWhitelistTest() {
        // TODO: test sddB2bWhitelist
    }

    /**
     * Test the property 'sddCoreBlacklist'
     */
    @Test
    void sddCoreBlacklistTest() {
        // TODO: test sddCoreBlacklist
    }

    /**
     * Test the property 'usableForSct'
     */
    @Test
    void usableForSctTest() {
        // TODO: test usableForSct
    }

    /**
     * Test the property 'sddCoreKnownUniqueMandateReference'
     */
    @Test
    void sddCoreKnownUniqueMandateReferenceTest() {
        // TODO: test sddCoreKnownUniqueMandateReference
    }

    /**
     * Test the property 'isActive'
     */
    @Test
    void isActiveTest() {
        // TODO: test isActive
    }

    /**
     * Test the property 'createdDate'
     */
    @Test
    void createdDateTest() {
        // TODO: test createdDate
    }

    /**
     * Test the property 'modifiedDate'
     */
    @Test
    void modifiedDateTest() {
        // TODO: test modifiedDate
    }

}
