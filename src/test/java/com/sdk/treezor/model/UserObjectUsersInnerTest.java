/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Treezor API
 * As a REST API, Treezor accepts and returns JSON payloads, along with the associated `application/json` content type.  You can learn everything you need to know about authentication, credentials, data formats, and more in the [API Basics](/guide/api-basics/environments.html) section.  Like the rest of the documentation, this reference focuses on the latest version of the Treezor API (Connect). 
 *
 * The version of the OpenAPI document: 25.04.03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sdk.treezor.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UserObjectUsersInner
 */
class UserObjectUsersInnerTest {
    private final UserObjectUsersInner model = new UserObjectUsersInner();

    /**
     * Model tests for UserObjectUsersInner
     */
    @Test
    void testUserObjectUsersInner() {
        // TODO: test UserObjectUsersInner
    }

    /**
     * Test the property 'userId'
     */
    @Test
    void userIdTest() {
        // TODO: test userId
    }

    /**
     * Test the property 'userStatus'
     */
    @Test
    void userStatusTest() {
        // TODO: test userStatus
    }

    /**
     * Test the property 'userTag'
     */
    @Test
    void userTagTest() {
        // TODO: test userTag
    }

    /**
     * Test the property 'parentUserId'
     */
    @Test
    void parentUserIdTest() {
        // TODO: test parentUserId
    }

    /**
     * Test the property 'parentType'
     */
    @Test
    void parentTypeTest() {
        // TODO: test parentType
    }

    /**
     * Test the property 'controllingPersonType'
     */
    @Test
    void controllingPersonTypeTest() {
        // TODO: test controllingPersonType
    }

    /**
     * Test the property 'employeeType'
     */
    @Test
    void employeeTypeTest() {
        // TODO: test employeeType
    }

    /**
     * Test the property 'specifiedUSPerson'
     */
    @Test
    void specifiedUSPersonTest() {
        // TODO: test specifiedUSPerson
    }

    /**
     * Test the property 'title'
     */
    @Test
    void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'firstname'
     */
    @Test
    void firstnameTest() {
        // TODO: test firstname
    }

    /**
     * Test the property 'lastname'
     */
    @Test
    void lastnameTest() {
        // TODO: test lastname
    }

    /**
     * Test the property 'middleNames'
     */
    @Test
    void middleNamesTest() {
        // TODO: test middleNames
    }

    /**
     * Test the property 'birthday'
     */
    @Test
    void birthdayTest() {
        // TODO: test birthday
    }

    /**
     * Test the property 'email'
     */
    @Test
    void emailTest() {
        // TODO: test email
    }

    /**
     * Test the property 'address1'
     */
    @Test
    void address1Test() {
        // TODO: test address1
    }

    /**
     * Test the property 'address2'
     */
    @Test
    void address2Test() {
        // TODO: test address2
    }

    /**
     * Test the property 'address3'
     */
    @Test
    void address3Test() {
        // TODO: test address3
    }

    /**
     * Test the property 'postcode'
     */
    @Test
    void postcodeTest() {
        // TODO: test postcode
    }

    /**
     * Test the property 'city'
     */
    @Test
    void cityTest() {
        // TODO: test city
    }

    /**
     * Test the property 'state'
     */
    @Test
    void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'country'
     */
    @Test
    void countryTest() {
        // TODO: test country
    }

    /**
     * Test the property 'countryName'
     */
    @Test
    void countryNameTest() {
        // TODO: test countryName
    }

    /**
     * Test the property 'distributionCountry'
     */
    @Test
    void distributionCountryTest() {
        // TODO: test distributionCountry
    }

    /**
     * Test the property 'secondaryAddress1'
     */
    @Test
    void secondaryAddress1Test() {
        // TODO: test secondaryAddress1
    }

    /**
     * Test the property 'secondaryAddress2'
     */
    @Test
    void secondaryAddress2Test() {
        // TODO: test secondaryAddress2
    }

    /**
     * Test the property 'secondaryAddress3'
     */
    @Test
    void secondaryAddress3Test() {
        // TODO: test secondaryAddress3
    }

    /**
     * Test the property 'secondaryPostcode'
     */
    @Test
    void secondaryPostcodeTest() {
        // TODO: test secondaryPostcode
    }

    /**
     * Test the property 'secondaryCity'
     */
    @Test
    void secondaryCityTest() {
        // TODO: test secondaryCity
    }

    /**
     * Test the property 'secondaryState'
     */
    @Test
    void secondaryStateTest() {
        // TODO: test secondaryState
    }

    /**
     * Test the property 'secondaryCountry'
     */
    @Test
    void secondaryCountryTest() {
        // TODO: test secondaryCountry
    }

    /**
     * Test the property 'clientId'
     */
    @Test
    void clientIdTest() {
        // TODO: test clientId
    }

    /**
     * Test the property 'phone'
     */
    @Test
    void phoneTest() {
        // TODO: test phone
    }

    /**
     * Test the property 'mobile'
     */
    @Test
    void mobileTest() {
        // TODO: test mobile
    }

    /**
     * Test the property 'nationality'
     */
    @Test
    void nationalityTest() {
        // TODO: test nationality
    }

    /**
     * Test the property 'nationalityOther'
     */
    @Test
    void nationalityOtherTest() {
        // TODO: test nationalityOther
    }

    /**
     * Test the property 'placeOfBirth'
     */
    @Test
    void placeOfBirthTest() {
        // TODO: test placeOfBirth
    }

    /**
     * Test the property 'birthCountry'
     */
    @Test
    void birthCountryTest() {
        // TODO: test birthCountry
    }

    /**
     * Test the property 'occupation'
     */
    @Test
    void occupationTest() {
        // TODO: test occupation
    }

    /**
     * Test the property 'incomeRange'
     */
    @Test
    void incomeRangeTest() {
        // TODO: test incomeRange
    }

    /**
     * Test the property 'legalName'
     */
    @Test
    void legalNameTest() {
        // TODO: test legalName
    }

    /**
     * Test the property 'legalNameEmbossed'
     */
    @Test
    void legalNameEmbossedTest() {
        // TODO: test legalNameEmbossed
    }

    /**
     * Test the property 'legalRegistrationNumber'
     */
    @Test
    void legalRegistrationNumberTest() {
        // TODO: test legalRegistrationNumber
    }

    /**
     * Test the property 'legalTvaNumber'
     */
    @Test
    void legalTvaNumberTest() {
        // TODO: test legalTvaNumber
    }

    /**
     * Test the property 'legalRegistrationDate'
     */
    @Test
    void legalRegistrationDateTest() {
        // TODO: test legalRegistrationDate
    }

    /**
     * Test the property 'legalForm'
     */
    @Test
    void legalFormTest() {
        // TODO: test legalForm
    }

    /**
     * Test the property 'legalShareCapital'
     */
    @Test
    void legalShareCapitalTest() {
        // TODO: test legalShareCapital
    }

    /**
     * Test the property 'legalSector'
     */
    @Test
    void legalSectorTest() {
        // TODO: test legalSector
    }

    /**
     * Test the property 'legalAnnualTurnOver'
     */
    @Test
    void legalAnnualTurnOverTest() {
        // TODO: test legalAnnualTurnOver
    }

    /**
     * Test the property 'legalNetIncomeRange'
     */
    @Test
    void legalNetIncomeRangeTest() {
        // TODO: test legalNetIncomeRange
    }

    /**
     * Test the property 'legalNumberOfEmployeeRange'
     */
    @Test
    void legalNumberOfEmployeeRangeTest() {
        // TODO: test legalNumberOfEmployeeRange
    }

    /**
     * Test the property 'effectiveBeneficiary'
     */
    @Test
    void effectiveBeneficiaryTest() {
        // TODO: test effectiveBeneficiary
    }

    /**
     * Test the property 'kycLevel'
     */
    @Test
    void kycLevelTest() {
        // TODO: test kycLevel
    }

    /**
     * Test the property 'kycReview'
     */
    @Test
    void kycReviewTest() {
        // TODO: test kycReview
    }

    /**
     * Test the property 'kycReviewComment'
     */
    @Test
    void kycReviewCommentTest() {
        // TODO: test kycReviewComment
    }

    /**
     * Test the property 'isFreezed'
     */
    @Test
    void isFreezedTest() {
        // TODO: test isFreezed
    }

    /**
     * Test the property 'isFrozen'
     */
    @Test
    void isFrozenTest() {
        // TODO: test isFrozen
    }

    /**
     * Test the property 'language'
     */
    @Test
    void languageTest() {
        // TODO: test language
    }

    /**
     * Test the property 'optInMailing'
     */
    @Test
    void optInMailingTest() {
        // TODO: test optInMailing
    }

    /**
     * Test the property 'sepaCreditorIdentifier'
     */
    @Test
    void sepaCreditorIdentifierTest() {
        // TODO: test sepaCreditorIdentifier
    }

    /**
     * Test the property 'taxNumber'
     */
    @Test
    void taxNumberTest() {
        // TODO: test taxNumber
    }

    /**
     * Test the property 'taxResidence'
     */
    @Test
    void taxResidenceTest() {
        // TODO: test taxResidence
    }

    /**
     * Test the property 'position'
     */
    @Test
    void positionTest() {
        // TODO: test position
    }

    /**
     * Test the property 'personalAssets'
     */
    @Test
    void personalAssetsTest() {
        // TODO: test personalAssets
    }

    /**
     * Test the property 'activityOutsideEu'
     */
    @Test
    void activityOutsideEuTest() {
        // TODO: test activityOutsideEu
    }

    /**
     * Test the property 'economicSanctions'
     */
    @Test
    void economicSanctionsTest() {
        // TODO: test economicSanctions
    }

    /**
     * Test the property 'residentCountriesSanctions'
     */
    @Test
    void residentCountriesSanctionsTest() {
        // TODO: test residentCountriesSanctions
    }

    /**
     * Test the property 'involvedSanctions'
     */
    @Test
    void involvedSanctionsTest() {
        // TODO: test involvedSanctions
    }

    /**
     * Test the property 'entitySanctionsQuestionnaire'
     */
    @Test
    void entitySanctionsQuestionnaireTest() {
        // TODO: test entitySanctionsQuestionnaire
    }

    /**
     * Test the property 'sanctionsQuestionnaireDate'
     */
    @Test
    void sanctionsQuestionnaireDateTest() {
        // TODO: test sanctionsQuestionnaireDate
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'occupationType'
     */
    @Test
    void occupationTypeTest() {
        // TODO: test occupationType
    }

    /**
     * Test the property 'sourceOfFunds'
     */
    @Test
    void sourceOfFundsTest() {
        // TODO: test sourceOfFunds
    }

    /**
     * Test the property 'legalSectorType'
     */
    @Test
    void legalSectorTypeTest() {
        // TODO: test legalSectorType
    }

    /**
     * Test the property 'isOnStockExchange'
     */
    @Test
    void isOnStockExchangeTest() {
        // TODO: test isOnStockExchange
    }

    /**
     * Test the property 'codeStatus'
     */
    @Test
    void codeStatusTest() {
        // TODO: test codeStatus
    }

    /**
     * Test the property 'informationStatus'
     */
    @Test
    void informationStatusTest() {
        // TODO: test informationStatus
    }

    /**
     * Test the property 'createdDate'
     */
    @Test
    void createdDateTest() {
        // TODO: test createdDate
    }

    /**
     * Test the property 'modifiedDate'
     */
    @Test
    void modifiedDateTest() {
        // TODO: test modifiedDate
    }

    /**
     * Test the property 'walletCount'
     */
    @Test
    void walletCountTest() {
        // TODO: test walletCount
    }

    /**
     * Test the property 'payinCount'
     */
    @Test
    void payinCountTest() {
        // TODO: test payinCount
    }

    /**
     * Test the property 'totalRows'
     */
    @Test
    void totalRowsTest() {
        // TODO: test totalRows
    }

    /**
     * Test the property 'occupationCategory'
     */
    @Test
    void occupationCategoryTest() {
        // TODO: test occupationCategory
    }

    /**
     * Test the property 'personalAssetsRange'
     */
    @Test
    void personalAssetsRangeTest() {
        // TODO: test personalAssetsRange
    }

    /**
     * Test the property 'monthlyIncomeRange'
     */
    @Test
    void monthlyIncomeRangeTest() {
        // TODO: test monthlyIncomeRange
    }

    /**
     * Test the property 'birthCityCode'
     */
    @Test
    void birthCityCodeTest() {
        // TODO: test birthCityCode
    }

}
